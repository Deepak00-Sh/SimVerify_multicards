Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ArtifactsWorkspaceSettings\">\r\n    <artifacts-to-build>\r\n      <artifact name=\"SimVerify_multicards:jar\" />\r\n    </artifacts-to-build>\r\n  </component>\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"08806b69-6f2c-4550-a435-1081ebc30207\" name=\"Changes\" comment=\"\">\r\n      <change afterPath=\"$PROJECT_DIR$/.idea/libraries/commons_csv_1_10_0.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/TestingController4.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/TestingController4.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n        <option value=\"FxmlFile\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"ROOT_SYNC\" value=\"DONT_SYNC\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"2MpFSqgfrkTYaZocy8lyNo9lcOl\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"ASKED_SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"RunOnceActivity.OpenProjectViewOnStart\": \"true\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"last_opened_file_path\": \"D:/work/SIMCardValidationProject/SIMVerify/lib\",\r\n    \"project.structure.last.edited\": \"Artifacts\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.26666668\",\r\n    \"settings.editor.selected.configurable\": \"reference.settings.project.maven.repository.indices\"\r\n  }\r\n}]]></component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\SimVerify_multicards\\src\\main\\resources\\com\\mannash\\javafxapplication\\fxml\\images\" />\r\n      <recent name=\"D:\\SimVerify_multicards\\src\\main\\java\\com\\mannash\\simcardvalidation\" />\r\n      <recent name=\"D:\\Work\\R&amp;D\\Project_3\\SimVerify_multicards\\src\\main\\resources\\com\\mannash\\javafxapplication\\fxml\\images\" />\r\n      <recent name=\"D:\\Work\\R&amp;D\\Project_3\\SimVerify_multicards\\src\\main\\resources\\com\\mannash\\javafxapplication\\fxml\" />\r\n      <recent name=\"D:\\Work\\R&amp;D\\Project_3\\SimVerify_multicards\\src\\main\\java\\com\\mannash\\simcardvalidation\\threads\" />\r\n    </key>\r\n    <key name=\"CopyClassDialog.RECENTS_KEY\">\r\n      <recent name=\"com.mannash.simcardvalidation\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"SvnConfiguration\">\r\n    <configuration>C:\\Users\\Lenovo\\AppData\\Roaming\\Subversion</configuration>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"08806b69-6f2c-4550-a435-1081ebc30207\" name=\"Changes\" comment=\"\" />\r\n      <created>1678456619627</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1678456619627</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Master thread implemented\">\r\n      <created>1678644270152</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678644270152</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Master thread implemented\">\r\n      <created>1678644318989</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1678644318989</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"vcs\">\r\n      <created>1679424300717</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679424300717</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"vcs\">\r\n      <created>1679459240957</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1679459240957</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"5\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <ignored-roots>\r\n      <path value=\"$PROJECT_DIR$/..\" />\r\n      <path value=\"$PROJECT_DIR$/../\" />\r\n      <path value=\"$PROJECT_DIR$\" />\r\n    </ignored-roots>\r\n    <MESSAGE value=\"Master thread implemented\" />\r\n    <MESSAGE value=\"Updated project till the client-side implementation without the cancelling all threads logic\" />\r\n    <MESSAGE value=\"vcs\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"vcs\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 298661d93eb1d12727ce62c0bfc9d0237af41340)
+++ b/.idea/workspace.xml	(date 1679468518542)
@@ -10,9 +10,10 @@
   </component>
   <component name="ChangeListManager">
     <list default="true" id="08806b69-6f2c-4550-a435-1081ebc30207" name="Changes" comment="">
-      <change afterPath="$PROJECT_DIR$/.idea/libraries/commons_csv_1_10_0.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/TestingController4.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/TestingController4.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -46,11 +47,11 @@
     "RunOnceActivity.OpenProjectViewOnStart": "true",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "last_opened_file_path": "D:/work/SIMCardValidationProject/SIMVerify/lib",
-    "project.structure.last.edited": "Artifacts",
+    "last_opened_file_path": "D:/work/SIMCardValidationProject/SIMVerify/lib/openjfx-78-backport-1.8.0-ea-b96.1.jar",
+    "project.structure.last.edited": "Libraries",
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.26666668",
-    "settings.editor.selected.configurable": "reference.settings.project.maven.repository.indices"
+    "settings.editor.selected.configurable": "project.propVCSSupport.DirectoryMappings"
   }
 }]]></component>
   <component name="RecentsManager">
@@ -105,7 +106,14 @@
       <option name="project" value="LOCAL" />
       <updated>1679459240957</updated>
     </task>
-    <option name="localTasksCounter" value="5" />
+    <task id="LOCAL-00005" summary="Fixed the reporting section as it was not adding the data for faulty cards(NOT OK, FAULTY status was not being updated previously if any , in the csv file)">
+      <created>1679460745833</created>
+      <option name="number" value="00005" />
+      <option name="presentableId" value="LOCAL-00005" />
+      <option name="project" value="LOCAL" />
+      <updated>1679460745833</updated>
+    </task>
+    <option name="localTasksCounter" value="6" />
     <servers />
   </component>
   <component name="Vcs.Log.Tabs.Properties">
@@ -128,6 +136,7 @@
     <MESSAGE value="Master thread implemented" />
     <MESSAGE value="Updated project till the client-side implementation without the cancelling all threads logic" />
     <MESSAGE value="vcs" />
-    <option name="LAST_COMMIT_MESSAGE" value="vcs" />
+    <MESSAGE value="Fixed the reporting section as it was not adding the data for faulty cards(NOT OK, FAULTY status was not being updated previously if any , in the csv file)" />
+    <option name="LAST_COMMIT_MESSAGE" value="Fixed the reporting section as it was not adding the data for faulty cards(NOT OK, FAULTY status was not being updated previously if any , in the csv file)" />
   </component>
 </project>
\ No newline at end of file
Index: src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mannash.simcardvalidation;\r\n\r\nimport com.mannash.simcardvalidation.pojo.ExportTestingResultPojo;\r\nimport com.mannash.simcardvalidation.pojo.TerminalInfo;\r\nimport com.mannash.simcardvalidation.service.TerminalConnectService;\r\nimport com.mannash.simcardvalidation.service.TerminalConnectServiceImpl;\r\nimport com.mannash.simcardvalidation.service.TrakmeServerCommunicationService;\r\nimport com.mannash.simcardvalidation.service.TrakmeServerCommunicationServiceImpl;\r\nimport javafx.animation.PauseTransition;\r\nimport javafx.application.Platform;\r\nimport javafx.beans.value.ChangeListener;\r\nimport javafx.beans.value.ObservableValue;\r\nimport javafx.collections.ObservableList;\r\nimport javafx.concurrent.Task;\r\nimport javafx.event.EventHandler;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.geometry.Insets;\r\nimport javafx.geometry.NodeOrientation;\r\nimport javafx.geometry.Pos;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.Image;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.scene.input.MouseEvent;\r\nimport javafx.scene.layout.*;\r\nimport javafx.scene.paint.Color;\r\nimport javafx.scene.shape.Rectangle;\r\nimport javafx.scene.text.Text;\r\nimport javafx.stage.Modality;\r\nimport javafx.stage.Screen;\r\nimport javafx.stage.Stage;\r\nimport javafx.stage.WindowEvent;\r\nimport javafx.util.Callback;\r\nimport javafx.util.Duration;\r\nimport org.apache.commons.csv.CSVFormat;\r\nimport org.apache.commons.csv.CSVPrinter;\r\n\r\nimport javax.swing.text.StyledEditorKit;\r\nimport java.io.File;\r\nimport java.io.FileWriter;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\nimport java.time.LocalDateTime;\r\nimport java.time.format.DateTimeFormatter;\r\nimport java.util.*;\r\nimport java.util.concurrent.*;\r\n\r\n\r\npublic class SimVerifyMasterThread2 {\r\n\r\n    SimVerifyLoggerThread loggerThread;\r\n\r\n    //FXML elements\r\n    @FXML\r\n    private TextField user_input;\r\n    @FXML\r\n    private PasswordField password_input;\r\n    @FXML\r\n    private Label promptLabel;\r\n    @FXML\r\n    private Button loginButton;\r\n    @FXML\r\n    private GridPane mainGridPane;\r\n    @FXML\r\n    private VBox simCardVbox;\r\n\r\n    @FXML\r\n    private Label exportMessage;\r\n\r\n    @FXML\r\n    private ImageView startTestingButton;\r\n\r\n    @FXML\r\n    private static ListView cardsConnectedList;\r\n\r\n    @FXML\r\n    private ImageView exportIcon;\r\n    //runtime elements\r\n    ScrollPane pane;\r\n    //Image Views\r\n    Image cancelButton = new Image(\"/com/mannash/javafxapplication/fxml/images/button_cancel.png\");\r\n    Image processingImage = new Image(\"/com/mannash/javafxapplication/fxml/images/loading14.gif\");\r\n    Image doneImage = new Image(\"/com/mannash/javafxapplication/fxml/images/done4.gif\");\r\n    Image questionMarkImage = new Image(\"/com/mannash/javafxapplication/fxml/images/question-mark.png\");\r\n    Image startButtonImage = new Image(\"/com/mannash/javafxapplication/fxml/images/button_Start_Testing.png\");\r\n\r\n    //Indicator Images to listView\r\n//  Image redIndicatorImage = new Image(\"/com/mannash/javafxapplication/fxml/images/button_cancel.png\");\r\n    Image greenIndicatorImage = new Image(\"/com/mannash/javafxapplication/fxml/images/greenIndicator.gif\");\r\n    Image yellowIndicatorImage = new Image(\"/com/mannash/javafxapplication/fxml/images/yellow (1).gif\");\r\n    Image exportButtonImage = new Image(\"/com/mannash/javafxapplication/fxml/images/export.png\");\r\n    //LogtextArea\r\n    TextArea logTextArea = new TextArea();\r\n\r\n    //Task running\r\n    private Task<Boolean> task1;\r\n\r\n    //global variables for widgets\r\n    public static int numRows = 4;\r\n    public static int numCols = 4;\r\n    public static int elementRow = 0;\r\n    public static int elementColumn = 0;\r\n    public String _terminal = \"T\";\r\n    public String _card = \"C\";\r\n    public String _device = \"D\";\r\n    public String _ui = \"UI\";\r\n    PauseTransition pause = new PauseTransition(Duration.seconds(0));\r\n    StackPane[] cardWidget = new StackPane[16];\r\n    //private Stage primaryTestingStage = null;\r\n    public List<Thread> threadList = new ArrayList<Thread>();\r\n    int cardConnectedCounter = 0;\r\n    int finishedThreads = 0;\r\n    int initializedThreads = 0;\r\n    int terminalsConnected = 0;\r\n    Boolean logTextAreaInitialize = false;\r\n    //Thread for on start button Press\r\n    Thread thread1;\r\n    private List<Future<?>> futureList = new ArrayList<>();\r\n    List<TestingController4> controller4ThreadList = new ArrayList<>();\r\n    Thread[] threads = new Thread[Thread.activeCount()];\r\n    private boolean headersPrinted = false;\r\n\r\n    ConcurrentHashMap<Integer, ExportTestingResultPojo> cardTestingResultMap = new ConcurrentHashMap<Integer, ExportTestingResultPojo>();\r\n\r\n    ExportTestingResultPojo exportTestingResultPojo = new ExportTestingResultPojo();\r\n    private Object csvLock = new Object();\r\n\r\n    @FXML\r\n    public void onLoginButtonPress() throws IOException {\r\n//      TrakmeServerCommunicationService trakmeServerCommunicationService = new TrakmeServerCommunicationServiceImpl();\r\n        String userId = user_input.getText();\r\n        String password = password_input.getText();\r\n        String hardCodeUserId = \"a\";\r\n        String hardCodePassword = \"a\";\r\n        if (userId.equalsIgnoreCase(\"store1@airtel.in\") && password.equalsIgnoreCase(hardCodePassword)) {\r\n            Stage primaryStage = (Stage) loginButton.getScene().getWindow();\r\n            primaryStage.close();\r\n            loadTestingWindowData();\r\n        } else if (userId.equalsIgnoreCase(\"simlab@airtel.in\") && password.equalsIgnoreCase(hardCodePassword)) {\r\n            Stage primaryStage = (Stage) loginButton.getScene().getWindow();\r\n            primaryStage.close();\r\n            loadTestingWindowData();\r\n        } else if (userId.equalsIgnoreCase(hardCodeUserId) && password.equalsIgnoreCase(hardCodePassword)) {\r\n            Stage primaryStage = (Stage) loginButton.getScene().getWindow();\r\n            primaryStage.close();\r\n            loadTestingWindowData();\r\n        } else {\r\n            promptLabel.setTextFill(Color.rgb(255, 0, 0));\r\n            promptLabel.setText(\"Invalid username or password!\");\r\n        }\r\n    }\r\n\r\n    //keyboard handling of loginscreen\r\n    @FXML\r\n    private void handleKeyForPassword(javafx.scene.input.KeyEvent event) {\r\n        if (event.getCode() == javafx.scene.input.KeyCode.ENTER) {\r\n            loginButton.fire();\r\n        } else if (event.getCode() == javafx.scene.input.KeyCode.TAB && event.isShiftDown()) {\r\n            event.consume();\r\n            user_input.requestFocus();\r\n        } else if (event.getCode() == javafx.scene.input.KeyCode.TAB) {\r\n            event.consume();\r\n            loginButton.requestFocus();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleKeyForUserInput(javafx.scene.input.KeyEvent event) {\r\n        if (event.getCode() == javafx.scene.input.KeyCode.ENTER) {\r\n            loginButton.fire();\r\n        } else if (event.getCode() == javafx.scene.input.KeyCode.TAB && event.isShiftDown()) {\r\n            event.consume();\r\n            loginButton.requestFocus();\r\n        } else if (event.getCode() == javafx.scene.input.KeyCode.TAB) {\r\n            event.consume();\r\n            password_input.requestFocus();\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    private void handleKeyForLoginButton(javafx.scene.input.KeyEvent event) {\r\n        if (event.getCode() == javafx.scene.input.KeyCode.ENTER) {\r\n            loginButton.fire();\r\n        } else if (event.getCode() == javafx.scene.input.KeyCode.TAB && event.isShiftDown()) {\r\n            event.consume();\r\n            password_input.requestFocus();\r\n        } else if (event.getCode() == javafx.scene.input.KeyCode.TAB) {\r\n            event.consume();\r\n            user_input.requestFocus();\r\n        }\r\n    }\r\n\r\n    public void loadTestingWindowData() throws IOException {\r\n        SimVerifyMasterThread2.elementRow = 0;\r\n        SimVerifyMasterThread2.elementColumn = 0;\r\n        Image icon = new Image(\"/com/mannash/javafxapplication/fxml/images/airtelair2.png\");\r\n        Parent mainPage = FXMLLoader.load(getClass().getResource(\"/com/mannash/javafxapplication/fxml/MyGrid.fxml\"));\r\n        Stage primaryStage = new Stage();\r\n        Scene scene = new Scene(mainPage);\r\n        primaryStage.setTitle(\"SIM Verify!\");\r\n        primaryStage.getIcons().add(icon);\r\n        primaryStage.setMaximized(true);\r\n//        primaryStage.setResizable(false);\r\n        primaryStage.setScene(scene);\r\n        for (int i = 0; i < 16; i++) {\r\n            double delay = 0.05;\r\n            int id = i;\r\n            PauseTransition pause = new PauseTransition(Duration.seconds(delay * i));\r\n            pause.setOnFinished(event -> {\r\n                addCardWidget(id);\r\n            });\r\n            pause.play();\r\n        }\r\n        primaryStage.show();\r\n        primaryStage.setOnCloseRequest(new EventHandler<WindowEvent>() {\r\n            @Override\r\n            public void handle(WindowEvent event) {\r\n                System.exit(0);\r\n            }\r\n        });\r\n        GridPane gridPane = (GridPane) scene.lookup(\"#mainGridPane\");\r\n        VBox root = (VBox) scene.lookup(\"#cardsConnectedVbox\");\r\n        this.mainGridPane = gridPane;\r\n        mainGridPane.setHgap(10);\r\n        mainGridPane.setVgap(10);\r\n        ListView<String> cardsConnectedList = (ListView<String>) scene.lookup(\"#cardsConnectedList\");\r\n        cardsConnectedList.prefHeightProperty().bind(root.heightProperty());\r\n        cardsConnectedList.maxHeight(Double.MAX_VALUE);\r\n        cardsConnectedList.setMinHeight(primaryStage.getMinHeight());\r\n        this.cardsConnectedList = cardsConnectedList;\r\n        Image backgroundImage = new Image(\"/com/mannash/javafxapplication/fxml/images/airtel-logo-f.png\");\r\n        BackgroundSize backgroundSize = new BackgroundSize(700, 500, false, false, false, false);\r\n        if (backgroundImage.isError()) {\r\n            System.out.println(\"Error loading background image: \" + backgroundImage.getException().getMessage());\r\n        }\r\n        BackgroundImage background = new BackgroundImage(backgroundImage,\r\n                BackgroundRepeat.NO_REPEAT,\r\n                BackgroundRepeat.NO_REPEAT,\r\n                BackgroundPosition.CENTER,\r\n                backgroundSize);\r\n        mainGridPane.setBackground(new Background(background));\r\n    }\r\n\r\n    public void reLoadTestingWindowData() {\r\n        logTextAreaInitialize = true;\r\n        cardsConnectedList.getItems().clear();\r\n        initializedThreads = 0;\r\n        finishedThreads = 0;\r\n\r\n        logTextArea.setText(\"\");\r\n        for (int i = 0; i < 16; i++) {\r\n            int id = i;\r\n            reLoadCardWidget(id);\r\n        }\r\n        exportMessage.setVisible(false);\r\n        exportIcon.setVisible(false);\r\n        setStartButton();\r\n        threadList.clear();\r\n    }\r\n\r\n    public void onStartButtonPress() {\r\n        if (startTestingButton.getImage().getUrl().contains(\"button_Start_Testing.png\")) {\r\n            TerminalConnectService terminalConnectService = new TerminalConnectServiceImpl(this.loggerThread);\r\n            int numberOfTerminal = terminalConnectService.fetchTerminalCount();\r\n            System.out.println(\"Number of terminal connected : \" + numberOfTerminal);\r\n            startTestingButton.setImage(cancelButton);\r\n\r\n            startingLogTextArea();\r\n            task1 = new Task<Boolean>() {\r\n                @Override\r\n                protected Boolean call() throws Exception {\r\n                    System.out.println(\"From task1\");\r\n                    for (int i = 0; i < numberOfTerminal; i++) {\r\n                        System.out.println(\"For loop count : \" + i);\r\n                        int a = i;\r\n                        try {\r\n                            Thread.sleep(1000);\r\n                        } catch (InterruptedException e) {\r\n                            e.printStackTrace();\r\n                        }\r\n                        updateStackPaneData(a, \"-\", \"-\");\r\n\r\n                    }\r\n                    return true;\r\n                }\r\n            };\r\n            task1.setOnSucceeded(event1 -> {\r\n                System.out.println(task1.getValue());\r\n\r\n                System.out.println(\"Task 1 Succeeded\");\r\n                initializeTestingThreads();\r\n            });\r\n            this.thread1 = new Thread(task1);\r\n            this.thread1.start();\r\n            System.out.println(\"Task 1 finished\");\r\n        } else if (startTestingButton.getImage().getUrl().contains(\"button_cancel\")) {\r\n//          cancelAllThreads();\r\n            onStopButtonClicked();\r\n            for (int i = 0; i < this.terminalsConnected; i++) {\r\n                updateWidgetStatusImage(false, i);\r\n                updateWidgetStatusLabel(\"Testing Cancelled\", i);\r\n            }\r\n//          this.loggerThread.interrupt();\r\n            setDoneButton();\r\n            cardsConnectedList.getItems().clear();\r\n        } else if (startTestingButton.getImage().getUrl().contains(\"done\")) {\r\n\r\n            reLoadTestingWindowData();\r\n        }\r\n    }\r\n\r\n    public void setDoneButton() {\r\n        startTestingButton.setImage(doneImage);\r\n    }\r\n\r\n    public void setStartButton() {\r\n        startTestingButton.setImage(startButtonImage);\r\n    }\r\n\r\n    public void setExportButton() {\r\n        Platform.runLater(() -> {\r\n            exportIcon.setVisible(true);\r\n            exportIcon.setDisable(false);\r\n            exportIcon.setImage(exportButtonImage);\r\n        });\r\n    }\r\n    public void updateStackPaneData(int index, String iccid, String imsi) {\r\n        Node node = mainGridPane.getChildren().get(index);\r\n        // index 1 because there are 2 cells in a row (column 0 and column 1)\r\n        if (node instanceof StackPane) {\r\n            StackPane stackPane = (StackPane) node;\r\n            // Find the Label inside the StackPane with fx:id \"iccid_value_label\"\r\n            cardWidget[index] = (StackPane) stackPane.lookup(\"#cardWidget_\" + index);\r\n            Platform.runLater(() -> {\r\n                try {\r\n                    cardWidget[index].setVisible(true);\r\n                    Label iccidValue = (Label) cardWidget[index].lookup(\"#iccid_value_label\");\r\n                    Label imsiValue = (Label) cardWidget[index].lookup(\"#imsi_value_label\");\r\n                    Label statusLabel = (Label) cardWidget[index].lookup(\"#status_label\");\r\n                    ImageView statusImage = (ImageView) cardWidget[index].lookup(\"#status_image\");\r\n                    iccidValue.setText(iccid);\r\n                    imsiValue.setText(imsi);\r\n//                    cardsConnectedList.getItems().add(index, iccidValue.getText());\r\n                    System.out.println(\"Task1 runLater : \" + index);\r\n//                            statusImage.setImage(processingImage);\r\n                    statusLabel.setText(\"Waiting for card\");\r\n                } catch (Exception e) {\r\n                    e.printStackTrace();\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n\r\n    public void updateWidgetStatusLabel(String status, int index) {\r\n        Node node = mainGridPane.getChildren().get(index);\r\n        if (node instanceof StackPane) {\r\n            StackPane stackPane = (StackPane) node;\r\n            stackPane.setStyle(\"-fx-background-color: #FFB562; -fx-background-radius: 15;\");\r\n            StackPane cardWidget = (StackPane) stackPane.lookup(\"#cardWidget_\" + index);\r\n            Label statusLabel = (Label) cardWidget.lookup(\"#status_label\");\r\n            pause.setOnFinished(event -> {\r\n                Platform.runLater(() -> {\r\n                    statusLabel.setText(status);\r\n                });\r\n            });\r\n            pause.play();\r\n        }\r\n    }\r\n\r\n    public void updateWidgetStatusImage(Image image, int index) {\r\n        Node node = mainGridPane.getChildren().get(index);\r\n        if (node instanceof StackPane) {\r\n            StackPane stackPane = (StackPane) node;\r\n            StackPane cardWidget = (StackPane) stackPane.lookup(\"#cardWidget_\" + index);\r\n            ImageView statusImage = (ImageView) cardWidget.lookup(\"#status_image\");\r\n            Platform.runLater(() -> {\r\n                statusImage.setImage(image);\r\n            });\r\n\r\n        }\r\n    }\r\n\r\n    public void updateWidgetStatusImage(Boolean testSuccessful, int index) {\r\n        Node node = mainGridPane.getChildren().get(index);\r\n        if (node instanceof StackPane) {\r\n            StackPane stackPane = (StackPane) node;\r\n            // Find the Label inside the StackPane with fx:id \"iccid_value_label\"\r\n            StackPane cardWidget = (StackPane) stackPane.lookup(\"#cardWidget_\" + index);\r\n            Label iccid = (Label) stackPane.lookup(\"#iccid_value_label\");\r\n            ImageView statusImage = (ImageView) cardWidget.lookup(\"#status_image\");\r\n            Image greenCheck = new Image(\"com/mannash/javafxapplication/fxml/images/greenRight.png\");\r\n            Image redCross = new Image(\"com/mannash/javafxapplication/fxml/images/redCross.png\");\r\n            pause.setOnFinished(event -> {\r\n                Platform.runLater(() -> {\r\n                    if (testSuccessful) {\r\n                        statusImage.setImage(greenCheck);\r\n                        stackPane.setStyle(\"-fx-background-color: #82CD47; -fx-background-radius: 15;\");\r\n//                        updateIndicatorImage(iccid.getText(), greenIndicatorImage, index);\r\n                        updateListItemColor(index, testSuccessful);\r\n\r\n                    } else {\r\n                        statusImage.setImage(redCross);\r\n                        stackPane.setStyle(\"-fx-background-color: #FF0000; -fx-background-radius: 15;\");\r\n//                        updateIndicatorImage(iccid.getText(), yellowIndicatorImage, index);\r\n                        updateListItemColor(index, testSuccessful);\r\n                    }\r\n                });\r\n            });\r\n            pause.play();\r\n        }\r\n    }\r\n\r\n    public void updateWidgetIccidAndImsi(String iccid, String imsi, int index) {\r\n        Node node = mainGridPane.getChildren().get(index);\r\n        if (node instanceof StackPane) {\r\n            StackPane stackPane = (StackPane) node;\r\n            // Find the Label inside the StackPane with fx:id \"iccid_value_label\"\r\n            StackPane cardWidget = (StackPane) stackPane.lookup(\"#cardWidget_\" + index);\r\n            Label iccidValue = (Label) cardWidget.lookup(\"#iccid_value_label\");\r\n            Label imsiValue = (Label) cardWidget.lookup(\"#imsi_value_label\");\r\n            Label widgetSlot = (Label) cardWidget.lookup(\"#widgetSlot\");\r\n            if (iccid == null) {\r\n                widgetSlot.setText(\"\" + (index + 1));\r\n                widgetSlot.setStyle(\"\");\r\n                return;\r\n            }\r\n            pause.setOnFinished(event -> {\r\n                Platform.runLater(() -> {\r\n                    iccidValue.setText(iccid);\r\n                    imsiValue.setText(imsi);\r\n                    widgetSlot.setText(\"\" + (index + 1));\r\n                    this.cardsConnectedList.getItems().add(index, iccid);\r\n//                    setIndicatorToICCID(iccid, yellowIndicatorImage, index);\r\n                });\r\n            });\r\n            pause.play();\r\n        }\r\n    }\r\n\r\n    public void updateListItemColor(int index , Boolean testSuccessful) {\r\n        // Get the item at the specified index\r\n        String item = (String) this.cardsConnectedList.getItems().get(index);\r\n        // Check if the item matches the specified iccid\r\n        Text iccid = new Text(item);\r\n        if(testSuccessful){\r\n           iccid.setFill(Color.LIGHTGREEN);\r\n        }\r\n        else if(!testSuccessful){\r\n            iccid.setFill(Color.RED);\r\n        }\r\n        this.cardsConnectedList.getItems().set(index, iccid);\r\n    }\r\n    private void startingLogTextArea() {\r\n        if (!logTextAreaInitialize) {\r\n            //Add Logs area\r\n            logTextArea.setPrefSize(simCardVbox.getPrefWidth(), 550);\r\n            logTextArea.positionCaret(logTextArea.getLength());\r\n            logTextArea.setNodeOrientation(NodeOrientation.LEFT_TO_RIGHT);\r\n            logTextArea.setEditable(false);\r\n            logTextArea.viewOrderProperty();\r\n\r\n            logTextArea.getStyleClass().add(\"text-area-left-aligned\");\r\n            logTextArea.setStyle(\"-fx-background-color: #e3f1fe; -text-area-background: #e3f1fe; text-area-background: #e3f1fe;-fx-border-color: transparent; -fx-border-width: 0; -fx-border-image-width: 0; -fx-background-insets: 0; -fx-padding: 0; -fx-background-image: null; -fx-region-background: null;-fx-border-insets: 0; -fx-background-size:0; -fx-border-image-insets:0;\");\r\n            pane = new ScrollPane(logTextArea);\r\n            Node horizontalScrollBar = pane.lookup(\".scroll-bar:horizontal\");\r\n            if (horizontalScrollBar != null) {\r\n                horizontalScrollBar.setStyle(\"-fx-pref-width: 1px;\");\r\n            }\r\n            pane.setStyle(\"-fx-background-color: #e3f1fe; -fx-border-color: transparent; -fx-border-width: 0; -fx-border-image-width: 0; -fx-background-image: null; -fx-region-background: null;-fx-border-insets: 0; -fx-background-size:0; -fx-border-image-insets:0;\");\r\n            pane.setFitToWidth(true);\r\n            pane.setFitToHeight(true);\r\n\r\n            pane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);\r\n            simCardVbox.getChildren().add(pane);\r\n\r\n            startLogging();\r\n\r\n        }\r\n    }\r\n\r\n    public void startLogging() {\r\n        this.loggerThread = new SimVerifyLoggerThread(logTextArea);\r\n        this.loggerThread.valueProperty().addListener(new ChangeListener<String>() {\r\n            @Override\r\n            public void changed(ObservableValue<? extends String> observableValue, String oldValue, String newValue) {\r\n                displayLogs(newValue);\r\n            }\r\n        });\r\n        Thread t = new Thread(this.loggerThread);\r\n        t.setDaemon(true);\r\n        t.start();\r\n    }\r\n\r\n    private void addCardWidget(int id) {\r\n        StackPane root = null;\r\n        try {\r\n            FXMLLoader loader = new FXMLLoader(getClass().getResource(\"/com/mannash/javafxapplication/fxml/GridElement.fxml\"));\r\n            root = loader.load();\r\n            StackPane cardWidget = (StackPane) root.lookup(\"#rootPane\");\r\n            Label iccidValue = (Label) cardWidget.lookup(\"#iccid_value_label\");\r\n            Label imsiValue = (Label) cardWidget.lookup(\"#imsi_value_label\");\r\n            cardWidget.setId(\"cardWidget_\" + id);\r\n            StackPane finalRoot1 = root;\r\n\r\n            if (SimVerifyMasterThread2.elementColumn == SimVerifyMasterThread2.numCols) {\r\n                SimVerifyMasterThread2.elementRow++;\r\n                SimVerifyMasterThread2.elementColumn = 0;\r\n            }\r\n\r\n            if (SimVerifyMasterThread2.elementRow < SimVerifyMasterThread2.numRows && SimVerifyMasterThread2.elementColumn < SimVerifyMasterThread2.numCols) {\r\n                int _elementColumn = elementColumn;\r\n                int _elementRow = elementRow;\r\n                pause.setOnFinished(event -> {\r\n                    Platform.runLater(() -> {\r\n                        iccidValue.setText(\"-\");\r\n                        imsiValue.setText(\"-\");\r\n                        mainGridPane.add(finalRoot1, _elementColumn, _elementRow);\r\n                        mainGridPane.getChildren().get(id).setVisible(false);\r\n\r\n                    });\r\n                });\r\n                pause.play();\r\n                SimVerifyMasterThread2.elementColumn++;\r\n            }\r\n        } catch (IOException e) {\r\n            throw new RuntimeException(e);\r\n        }\r\n    }\r\n\r\n    private void reLoadCardWidget(int id) {\r\n        try {\r\n            Scene scene = (Scene) startTestingButton.getScene();\r\n            StackPane cardWidget = (StackPane) scene.lookup(\"#cardWidget_\" + id);\r\n            Label iccidValue = (Label) cardWidget.lookup(\"#iccid_value_label\");\r\n            Label imsiValue = (Label) cardWidget.lookup(\"#imsi_value_label\");\r\n            ImageView statusImage = (ImageView) cardWidget.lookup(\"#status_image\");\r\n            Platform.runLater(() -> {\r\n                iccidValue.setText(\"-\");\r\n                imsiValue.setText(\"-\");\r\n                statusImage.setImage(questionMarkImage);\r\n                cardWidget.setStyle(\"-fx-background-color: #2F58CD; -fx-background-radius: 15;\");\r\n                mainGridPane.getChildren().get(id).setVisible(false);\r\n            });\r\n\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n    }\r\n\r\n    public void logOut() throws IOException {\r\n//        cancelAllThreads();\r\n        Parent logInPage = FXMLLoader.load(getClass().getResource(\"/com/mannash/javafxapplication/fxml/login-form.fxml\"));\r\n        Stage primaryStage = (Stage) startTestingButton.getScene().getWindow();\r\n        primaryStage.close();\r\n        Stage primaryStage2 = new Stage();\r\n        Scene scene = new Scene(logInPage);\r\n        primaryStage2.setScene(scene);\r\n        primaryStage2.setResizable(false);\r\n        Image icon = new Image(\"/com/mannash/javafxapplication/fxml/images/airtelair2.png\");\r\n        primaryStage2.getIcons().add(icon);\r\n        primaryStage2.setTitle(\"SIM Verify!\");\r\n\r\n        primaryStage2.show();\r\n\r\n    }\r\n\r\n    public void initializeTestingThreads() {\r\n        System.out.println(\"inside the run\");\r\n        TerminalConnectService terminalConnectService = new TerminalConnectServiceImpl(this.loggerThread);\r\n        List<TerminalInfo> terminalInfos = terminalConnectService.fetchTerminalInfo();\r\n        Iterator<TerminalInfo> terminalInfo = terminalInfos.iterator();\r\n        int index = 0;\r\n        while (terminalInfo.hasNext()) {\r\n            System.out.println(\"index : \" + index);\r\n            TerminalInfo terminal = terminalInfo.next();\r\n            System.out.println(\"Terminal Number : \" + (index + 1));\r\n            exportTestingResultPojo.setTerminalNumber((index + 1));\r\n            String iccid = terminal.getTerminalCardIccid();\r\n            System.out.println(\"ICCID : \" + iccid);\r\n            this.terminalsConnected++;\r\n            if (iccid == null) {\r\n                updateWidgetIccidAndImsi(null, null, index);\r\n\r\n            }\r\n            if (iccid != null) {\r\n                cardConnectedCounter++;\r\n                String imsi = terminal.getImsi();\r\n                System.out.println(\"IMSI : \" + imsi);\r\n\r\n                int finalIndex = index;\r\n                updateWidgetIccidAndImsi(iccid, imsi, finalIndex);\r\n                updateWidgetStatusLabel(\"IN_PROGRESS\", finalIndex);\r\n                updateWidgetStatusImage(processingImage, finalIndex);\r\n            }\r\n            index++;\r\n        }\r\n        startTestingThreads(terminalInfos);\r\n    }\r\n\r\n    private void startTestingThreads(List<TerminalInfo> terminals) {\r\n        int numThreads = Math.min(terminals.size(), Runtime.getRuntime().availableProcessors());\r\n        ExecutorService executor = Executors.newFixedThreadPool(numThreads);\r\n//        List<Future<?>> futures = new ArrayList<>();\r\n        for (int i = 0; i < terminals.size(); i++) {\r\n            TerminalInfo terminal = terminals.get(i);\r\n            System.out.println(\"terminal~~~\" + (terminal.getTerminalNumber()));\r\n            if (terminal.getTerminalCardIccid() != null) {\r\n                int terminalNumber = terminal.getTerminalNumber();\r\n                System.out.println(\"Terminal Number ~~~ : \" + (terminalNumber + 1));\r\n                String threadName = terminal.getTerminalNumber() + \"_\" + terminal.getTerminalCardIccid();\r\n                TestingController4 controller4 = new TestingController4(threadName, terminal, this, i, this.loggerThread);\r\n                controller4ThreadList.add(controller4);\r\n                Future<?> future = executor.submit(controller4);\r\n                futureList.add(future);\r\n                initializedThreads++;\r\n            }\r\n        }\r\n        for (Future<?> future : futureList) {\r\n            try {\r\n                future.get();\r\n            } catch (InterruptedException e) {\r\n                e.printStackTrace();\r\n            } catch (ExecutionException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        executor.shutdown();\r\n        System.out.println(\"testing done\");\r\n        this.loggerThread.displayLogs(_terminal, \"Verification Completed\", -1);\r\n    }\r\n\r\n    private void onStopButtonClicked() {\r\n        stopThreads();\r\n        System.out.println(\"testing stopped\");\r\n    }\r\n\r\n    private void stopThreads() {\r\n        Thread.enumerate(threads); // Iterate over each thread and interrupt if name matches\r\n        for (Thread thread : threads) {\r\n            if (thread != null) {\r\n                if (thread.getName().equals(\"Testing thread : 0\")) {\r\n                    System.out.println(\"found!!\");\r\n                    thread.interrupt();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void displayLogs(String log) {\r\n        Platform.runLater(() -> {\r\n            logTextArea.appendText(log + \"\\n\");\r\n        });\r\n    }\r\n\r\n    public synchronized void updateTesting(int id) {\r\n        finishedThreads++;\r\n        if (finishedThreads == initializedThreads) {\r\n            setDoneButton();\r\n            setExportButton();\r\n            loggerThread.displayLogs(_terminal, \"Verification Completed\", -1);\r\n            System.out.println(\"testing done\");\r\n        }\r\n    }\r\n\r\n    @FXML\r\n    public void onExportButtonPress() {\r\n        String csvFilePath = \"..\\\\reports\\\\\";\r\n        LocalDateTime currentDateTime = LocalDateTime.now();\r\n        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyyMMdd_HHmmss\");\r\n        String dateTimeString = currentDateTime.format(formatter);\r\n        String fileName = csvFilePath + \"TestingResult_\" + dateTimeString + \".csv\";\r\n        File csvFile = new File(fileName);\r\n\r\n        File path = new File(csvFilePath);\r\n        if (!path.exists()) {\r\n            path.mkdir();\r\n        }\r\n        if (csvFile.exists()) {\r\n            this.headersPrinted = true;\r\n        }\r\n        if (!csvFile.exists()) {\r\n            try {\r\n                csvFile.createNewFile();\r\n                this.headersPrinted = false;\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n        try (FileWriter writer = new FileWriter(csvFile, true);\r\n             CSVPrinter csvPrinter = new CSVPrinter(writer, CSVFormat.DEFAULT)) {\r\n            if (!this.headersPrinted) {\r\n                csvPrinter.printRecord(\r\n                        \"Date\",\r\n                        \"Time\",\r\n                        \"Terminal Number\",\r\n                        \"ICCID\",\r\n                        \"IMSI\",\r\n                        \"SIM Heartbeat\",\r\n                        \"File System Verification\",\r\n                        \"Profile Testing\",\r\n                        \"Read/Write\",\r\n                        \"Card status\"\r\n                );\r\n                this.headersPrinted = true;\r\n            }\r\n            synchronized (csvLock) {\r\n                for (Map.Entry<Integer, ExportTestingResultPojo> result : cardTestingResultMap.entrySet()) {\r\n                    Integer key = result.getKey();\r\n                    ExportTestingResultPojo value = result.getValue();\r\n                    csvPrinter.printRecord(\r\n                            value.getDateOfTesting(),\r\n                            value.getTimeOfTesting(),\r\n                            value.getTerminalNumber(),\r\n                            value.getTerminalICCID(),\r\n                            value.getTerminalIMSI(),\r\n                            value.getSIMHeartbeat(),\r\n                            value.getFileSystemVerification(),\r\n                            value.getProfileTesting(),\r\n                            value.getReadWrite(),\r\n                            value.getCardStatus()\r\n                    );\r\n                }\r\n                csvPrinter.flush();\r\n            }\r\n            exportIcon.setVisible(false);\r\n            exportMessage.setVisible(true);\r\n        } catch (Exception ex) {\r\n            ex.printStackTrace();\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java b/src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java
--- a/src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java	(revision 298661d93eb1d12727ce62c0bfc9d0237af41340)
+++ b/src/main/java/com/mannash/simcardvalidation/SimVerifyMasterThread2.java	(date 1679468518057)
@@ -10,6 +10,7 @@
 import javafx.application.Platform;
 import javafx.beans.value.ChangeListener;
 import javafx.beans.value.ObservableValue;
+import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.concurrent.Task;
 import javafx.event.EventHandler;
@@ -28,6 +29,8 @@
 import javafx.scene.layout.*;
 import javafx.scene.paint.Color;
 import javafx.scene.shape.Rectangle;
+import javafx.scene.text.Font;
+import javafx.scene.text.FontWeight;
 import javafx.scene.text.Text;
 import javafx.stage.Modality;
 import javafx.stage.Screen;
@@ -130,7 +133,7 @@
 
     @FXML
     public void onLoginButtonPress() throws IOException {
-//      TrakmeServerCommunicationService trakmeServerCommunicationService = new TrakmeServerCommunicationServiceImpl();
+      TrakmeServerCommunicationService trakmeServerCommunicationService = new TrakmeServerCommunicationServiceImpl(loggerThread);
         String userId = user_input.getText();
         String password = password_input.getText();
         String hardCodeUserId = "a";
@@ -265,6 +268,7 @@
         if (startTestingButton.getImage().getUrl().contains("button_Start_Testing.png")) {
             TerminalConnectService terminalConnectService = new TerminalConnectServiceImpl(this.loggerThread);
             int numberOfTerminal = terminalConnectService.fetchTerminalCount();
+
             System.out.println("Number of terminal connected : " + numberOfTerminal);
             startTestingButton.setImage(cancelButton);
 
@@ -432,8 +436,9 @@
                 Platform.runLater(() -> {
                     iccidValue.setText(iccid);
                     imsiValue.setText(imsi);
+                        this.cardsConnectedList.getItems().add(iccid);
                     widgetSlot.setText("" + (index + 1));
-                    this.cardsConnectedList.getItems().add(index, iccid);
+
 //                    setIndicatorToICCID(iccid, yellowIndicatorImage, index);
                 });
             });
@@ -447,10 +452,12 @@
         // Check if the item matches the specified iccid
         Text iccid = new Text(item);
         if(testSuccessful){
-           iccid.setFill(Color.LIGHTGREEN);
+           iccid.setFill(Color.GREEN);
+           iccid.setFont(Font.font("System", FontWeight.BOLD, 12));
         }
         else if(!testSuccessful){
             iccid.setFill(Color.RED);
+            iccid.setFont(Font.font("System", FontWeight.BOLD, 12));
         }
         this.cardsConnectedList.getItems().set(index, iccid);
     }
@@ -555,6 +562,7 @@
 //        cancelAllThreads();
         Parent logInPage = FXMLLoader.load(getClass().getResource("/com/mannash/javafxapplication/fxml/login-form.fxml"));
         Stage primaryStage = (Stage) startTestingButton.getScene().getWindow();
+        this.cardsConnectedList.getItems().clear();
         primaryStage.close();
         Stage primaryStage2 = new Stage();
         Scene scene = new Scene(logInPage);
@@ -574,6 +582,7 @@
         List<TerminalInfo> terminalInfos = terminalConnectService.fetchTerminalInfo();
         Iterator<TerminalInfo> terminalInfo = terminalInfos.iterator();
         int index = 0;
+        this.cardsConnectedList.setItems(FXCollections.observableArrayList());
         while (terminalInfo.hasNext()) {
             System.out.println("index : " + index);
             TerminalInfo terminal = terminalInfo.next();
@@ -584,7 +593,6 @@
             this.terminalsConnected++;
             if (iccid == null) {
                 updateWidgetIccidAndImsi(null, null, index);
-
             }
             if (iccid != null) {
                 cardConnectedCounter++;
@@ -607,10 +615,9 @@
 //        List<Future<?>> futures = new ArrayList<>();
         for (int i = 0; i < terminals.size(); i++) {
             TerminalInfo terminal = terminals.get(i);
-            System.out.println("terminal~~~" + (terminal.getTerminalNumber()));
             if (terminal.getTerminalCardIccid() != null) {
                 int terminalNumber = terminal.getTerminalNumber();
-                System.out.println("Terminal Number ~~~ : " + (terminalNumber + 1));
+                System.out.println("Terminal Number ~~~ : " + (terminalNumber));
                 String threadName = terminal.getTerminalNumber() + "_" + terminal.getTerminalCardIccid();
                 TestingController4 controller4 = new TestingController4(threadName, terminal, this, i, this.loggerThread);
                 controller4ThreadList.add(controller4);
Index: src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mannash.simcardvalidation.service;\r\n\r\nimport com.google.gson.Gson;\r\nimport com.mannash.simcardvalidation.pojo.*;\r\nimport org.apache.http.HttpEntity;\r\nimport org.apache.http.HttpResponse;\r\nimport org.apache.http.client.methods.CloseableHttpResponse;\r\nimport org.apache.http.client.methods.HttpGet;\r\nimport org.apache.http.client.methods.HttpPost;\r\nimport org.apache.http.impl.client.CloseableHttpClient;\r\nimport org.apache.http.impl.client.DefaultHttpClient;\r\nimport org.apache.http.impl.client.HttpClients;\r\nimport org.apache.http.util.EntityUtils;\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport java.io.IOException;\r\nimport java.net.URLEncoder;\r\nimport java.util.List;\r\n//import com.mannash.trakme.client.pojo.LogType;\r\n//import com.mannash.trakme.client.pojo.RequestClientLogPojo;\r\n//import com.mannash.trakme.client.pojo.ResponseAuthenticationPojo;\r\n//import com.mannash.trakme.client.pojo.ResponseFieldTestingCardInfos;\r\n//import com.mannash.trakme.client.pojo.ResponseFieldTestingProfileConfigPojo;\r\n//import com.mannash.trakme.client.pojo.ResponseProfileTestingConfig;\r\n//import com.mannash.trakme.client.pojo.ResponseStressTestingConfig;\r\n//import com.mannash.trakme.client.pojo.RequestClientLogsPojo;\r\n//import com.mannash.trakme.client.pojo.ServerResponseLogPojo;\r\n//import com.mannash.trakme.client.service.LoggerService;\r\n//import com.mannash.trakme.client.service.LoggerServiceImpl;\r\n//import com.mannash.trakmeserver.rest.service.FieldTestingClientLoggerServiceImpl;\r\n\r\npublic class TrakmeServerCommunicationServiceImpl implements TrakmeServerCommunicationService {\r\n\r\n\tprivate LoggerService loggerService;\r\n\tprivate ResponseAuthenticationPojo authenticationPojo;\r\n\tprivate final Logger logger = LoggerFactory.getLogger(TrakmeServerCommunicationServiceImpl.class);\r\n\tpublic String hostIP = \"\";\r\n\r\n\tpublic TrakmeServerCommunicationServiceImpl() {\r\n\r\n//\t\t this.loggerService = new LoggerServiceImpl();\r\n\r\n//\t\tFile file = new File(\"config/config.conf\");\r\n//\t\tif(!file.exists()) {\r\n//\t\t\tJOptionPane.showMessageDialog(null, \"Config file does not exist\");\r\n//\t\t\treturn ;\r\n//\t\t}\r\n//\t\tBufferedReader br = null;\r\n//\t\ttry {\r\n//\t\t\tbr = new BufferedReader(new FileReader(file));\r\n//\t\t} catch (FileNotFoundException e) {\r\n//\t\t\t// TODO Auto-generated catch block\r\n//\t\t\te.printStackTrace();\r\n//\t\t}\r\n//\t\tString st;\r\n//\t\ttry {\r\n//\t\t\twhile ((st = br.readLine()) != null) {\r\n//\t\t\t\tthis.hostIP = st;\r\n//\t\t\t}\r\n//\t\t} catch (IOException e) {\r\n//\t\t\t// TODO Auto-generated catch block\r\n//\t\t\te.printStackTrace();\r\n//\t\t}\r\n\t}\r\n\r\n\tGson gson;\r\n\r\n\tResponseAuthenticationPojo responseAuthenticationPojo = new ResponseAuthenticationPojo();\r\n\r\n\t@SuppressWarnings(\"deprecation\")\r\n\tpublic ResponseAuthenticationPojo authenticateClient(String userName, String password) {\r\n\r\n\t\tResponseAuthenticationPojo responseAuthenticationPojo = new ResponseAuthenticationPojo();\r\n\t\tif (userName == null || password == null || userName.isEmpty() || password.isEmpty()) {\r\n\t\t\tresponseAuthenticationPojo.setMessage(\"Username or Password can not be empty\");\r\n\t\t\treturn responseAuthenticationPojo;\r\n\t\t}\r\n\r\n\t\telse {\r\n\t\t\ttry {\r\n\t\t\t\torg.apache.http.client.HttpClient client = new DefaultHttpClient();\r\n\t\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/auth/validateUser?userId=\"\r\n\t\t\t\t\t\t+ userName + \"&password=\" + URLEncoder.encode(password);\r\n\r\n\t\t\t\tHttpPost httpPost = new HttpPost(completeUrl);\r\n\t\t\t\thttpPost.setHeader(\"Content-type\", \"application/json\");\r\n\t\t\t\t// this.logger.info(\"Sending request to TrakmeServer for authenticating user : \" + userName);\r\n\t\t\t\tHttpResponse response = client.execute(httpPost);\r\n\t\t\t\tif (response != null) {\r\n\t\t\t\t\tString responseString = EntityUtils.toString((HttpEntity) response.getEntity());\r\n\t\t\t\t\tif (response.getStatusLine().getStatusCode() != 200) {\r\n\t\t\t\t\t\tif (responseString != null) {\r\n\t\t\t\t\t\t\tif (response.getStatusLine().getStatusCode() == 401) {\r\n\t\t\t\t\t\t\t\tresponseAuthenticationPojo.setMessage(\"Invalid username/password\");\r\n\t\t\t\t\t\t\t\t// this.logger.error(\"Invalid Username & Password , Status code : \" + 401);\r\n\t\t\t\t\t\t\t\tresponseAuthenticationPojo.setStatusCode(401);\r\n\t\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\t\tresponseAuthenticationPojo.setMessage(\"Unable to authenticate user\");\r\n\t\t\t\t\t\t\t\t// this.logger.debug(\"Unable to authenticate user with Status code : \" + response.getStatusLine().getStatusCode());\r\n\t\t\t\t\t\t\t\tresponseAuthenticationPojo.setStatusCode(response.getStatusLine().getStatusCode());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t} else {\r\n\t\t\t\t\t\t\tresponseAuthenticationPojo.setMessage(\"Unable to authenticate user\");\r\n\t\t\t\t\t\t\tresponseAuthenticationPojo.setStatusCode(500);\r\n\t\t\t\t\t\t\t// this.logger.debug(\"Unable to authenticate user with Status code : \" + 500);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tresponseAuthenticationPojo.setStatusCode(200);\r\n\t\t\t\t\t\t// this.logger.info(\"TrakmeServer authenticated successfully with user\" + userName);\r\n\t\t\t\t\t\t// System.out.println(\"Status Code : \" + 200);\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\tresponseAuthenticationPojo.setMessage(\"Unable to authenticate user\");\r\n\t\t\t\t\tresponseAuthenticationPojo.setStatusCode(500);\r\n\t\t\t\t\t// this.logger.debug(\"Unable to authenticate user, response is null\");\r\n\t\t\t\t}\r\n\t\t\t} catch (Exception e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t\tresponseAuthenticationPojo.setMessage(\"Unable to authenticate user\");\r\n\t\t\t\tresponseAuthenticationPojo.setStatusCode(500);\r\n\t\t\t\t// this.logger.info(\"Unable to authentcate user\");\r\n\t\t\t}\r\n\t\t\treturn responseAuthenticationPojo;\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic ResponseFieldTestingCardInfos fetchWorkOrderInfo(String userName) {\r\n\r\n\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n\r\n\t\ttry {\r\n\r\n\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/getftIccid?usrId=\"\r\n\t\t\t\t\t+ userName;\r\n\r\n\t\t\t// this.logger.debug(\"Calling  Server : \" + completeUrl);\r\n\r\n\t\t\tHttpGet get = new HttpGet(completeUrl);\r\n\r\n\t\t\tGson gson = new Gson();\r\n\t\t\tCloseableHttpResponse response = client.execute(get);\r\n\t\t\t// String responseString = \"{ \\\"responseFieldTestingCardPojos\\\": [ {\r\n\t\t\t// \\\"cardIccid\\\": \\\"8991000905506201104F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 29,\r\n\t\t\t// \\\"woId\\\": 908, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 55,\r\n\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"COMPLETED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 56,\r\n\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"COMPLETED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 57,\r\n\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t// \\\"8991000905506200510F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] } ] }\";\r\n\t\t\tif (response.getEntity() != null) {\r\n\t\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n\r\n\t\t\t\t// String responseString = \"{ \\\"responseFieldTestingCardPojos\\\": [ {\r\n\t\t\t\t// \\\"cardIccid\\\": \\\"8991000905506201104F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 29,\r\n\t\t\t\t// \\\"woId\\\": 908, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 55,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"COMPLETED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 56,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"COMPLETED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 57,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905506200510F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905506200387F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905508700780F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905508700764F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905508700566F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905508700749F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] }, { \\\"cardIccid\\\":\r\n\t\t\t\t// \\\"8991000905506200585F\\\", \\\"cardTestingPercentage\\\": 0.0,\r\n\t\t\t\t// \\\"fieldTestingStatus\\\": \\\"TESTING_IN_PROGRESS\\\", \\\"fieldTestingCardId\\\": 37,\r\n\t\t\t\t// \\\"woId\\\": 919, \\\"fieldTestingCardStagePojos\\\": [ { \\\"fieldTestingStageId\\\":\r\n\t\t\t\t// 1, \\\"fieldTestingCardStageStatus\\\": \\\"ERROR\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"PROFILE_TESTING\\\", \\\"fieldTestingCardStageId\\\": 79,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 2,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"ONGOING\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"STRESS_TESTING\\\", \\\"fieldTestingCardStageId\\\": 80,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null }, { \\\"fieldTestingStageId\\\": 3,\r\n\t\t\t\t// \\\"fieldTestingCardStageStatus\\\": \\\"NOT_STARTED\\\", \\\"fieldTestingStageName\\\":\r\n\t\t\t\t// \\\"OTA_TESTING\\\", \\\"fieldTestingCardStageId\\\": 81,\r\n\t\t\t\t// \\\"fieldTestingStageStatus\\\": null } ] } ] }\";\r\n\t\t\t\tResponseFieldTestingCardInfos serverResponse = (ResponseFieldTestingCardInfos) gson\r\n\t\t\t\t\t\t.fromJson(responseString, ResponseFieldTestingCardInfos.class);\r\n\r\n\t\t\t\treturn serverResponse;\r\n\t\t\t} else {\r\n\t\t\t\treturn null;\r\n\t\t\t}\r\n\r\n\t\t} catch (Exception e) {\r\n\r\n\t\t\te.printStackTrace();\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tfinally {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tclient.close();\r\n\r\n\t\t\t} catch (IOException e) {\r\n\r\n\t\t\t\te.printStackTrace();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic void updateWOStatus(String woID, String iccid, String status, String userName) {\r\n\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n\r\n\t\ttry {\r\n\r\n\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/client/wo/status?usrId=\"\r\n\t\t\t\t\t+ userName + \"&woId=\" + woID + \"&iccid=\" + iccid + \"&status=\" + status;\r\n\r\n\t\t\t// this.logger.debug(\"Calling  Server : \" + completeUrl);\r\n\r\n\t\t\tHttpPost post = new HttpPost(completeUrl);\r\n\r\n\t\t\tGson gson = new Gson();\r\n\t\t\tCloseableHttpResponse response = client.execute(post);\r\n\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn;\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tclient.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void updateCardStageStatus(String woID, String iccid, int cardStageId, String status, String userName) {\r\n\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n\r\n\t\ttry {\r\n\r\n\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/client/card/status?usrId=\"\r\n\t\t\t\t\t+ userName + \"&woId=\" + woID + \"&iccid=\" + iccid + \"&status=\" + status + \"&cardStageId=\"\r\n\t\t\t\t\t+ cardStageId;\r\n\r\n\t\t\t// this.logger.debug(\"Calling  Server : \" + completeUrl);\r\n\r\n\t\t\tHttpPost post = new HttpPost(completeUrl);\r\n\r\n\t\t\tGson gson = new Gson();\r\n\t\t\tCloseableHttpResponse response = client.execute(post);\r\n\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn;\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tclient.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic void updateCardStageCounter(String woID, String iccid, int cardStageId, long counter, String userName) {\r\n\t\tSystem.out.println(\"### current counter which is being sent to server : \" + counter);\r\n\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n\r\n\t\ttry {\r\n\r\n\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/client/card/counter?usrId=\"\r\n\t\t\t\t\t+ userName + \"&woId=\" + woID + \"&iccid=\" + iccid + \"&counter=\" + counter + \"&cardStageId=\"\r\n\t\t\t\t\t+ cardStageId;\r\n\r\n\t\t\t// this.logger.debug(\"Calling  Server : \" + completeUrl);\r\n\r\n\t\t\tHttpPost post = new HttpPost(completeUrl);\r\n\r\n\t\t\tGson gson = new Gson();\r\n\t\t\tCloseableHttpResponse response = client.execute(post);\r\n\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\te.printStackTrace();\r\n\t\t\treturn;\r\n\t\t} finally {\r\n\t\t\ttry {\r\n\t\t\t\tclient.close();\r\n\t\t\t} catch (IOException e) {\r\n\t\t\t\te.printStackTrace();\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tpublic ResponseProfileTestingConfig getProfileTestingConfig(String iccid, String woId, String userName) {\r\n\r\n\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n\t\tResponseProfileTestingConfig responseProfileTestingConfig = new ResponseProfileTestingConfig();\r\n\t\ttry {\r\n\r\n\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/profileconfig/get?usrId=\"\r\n\t\t\t\t\t+ userName + \"&woId=\" + woId;\r\n\r\n\t\t\t// this.logger.debug(\"Calling  Server : \" + completeUrl);\r\n\r\n\t\t\tHttpGet get = new HttpGet(completeUrl);\r\n\r\n\t\t\tGson gson = new Gson();\r\n\t\t\tCloseableHttpResponse response = client.execute(get);\r\n//\t\t\tString responseString = \"{\\\"fileSystemConfig\\\":[\\\"2F05,3F00,T,ALWAYS,CHV1,ADM,ADM,YES,NA,NA,8\\\",\\\"2FE2,3F00,T,ALWAYS,NEVER,ADM,ADM,NO,NA,NA,10\\\",\\\"2F00,3F00,LF,ALWAYS,ADM,ADM,ADM,YES,53,1,53\\\"],\\\"fileContentConfig\\\":[\\\"2F05,3F00,T,ALWAYS,1,1,FFFFFFFFFFFFFFFF\\\",\\\"2FE2,3F00,T,ALWAYS,1,1,ICCIDI\\\",\\\"2F00,3F00,LF,ALWAYS,1,1,41697274656C203447\\\"]}\";\r\n\t\t\t// this.System.out.println(\"Sever Response : \" + responseString);\r\n\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n\r\n\t\t\tResponseFieldTestingProfileConfigPojo responseFieldTestingProfileConfigPojo = (ResponseFieldTestingProfileConfigPojo) gson\r\n\t\t\t\t\t.fromJson(responseString, ResponseFieldTestingProfileConfigPojo.class);\r\n\t\t\tresponseProfileTestingConfig\r\n\t\t\t\t\t.setFileContentConfig(responseFieldTestingProfileConfigPojo.getFileContentConfigs());\r\n\t\t\tresponseProfileTestingConfig\r\n\t\t\t\t\t.setFileSystemConfig(responseFieldTestingProfileConfigPojo.getFileSystemConfigs());\r\n\t\t\treturn responseProfileTestingConfig;\r\n\r\n\t\t} catch (Exception e) {\r\n\r\n\t\t\te.printStackTrace();\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tfinally {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tclient.close();\r\n\r\n\t\t\t} catch (IOException e) {\r\n\r\n\t\t\t\te.printStackTrace();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n\tpublic String sendLogsToServer(List<RequestClientLogPojo> requestLogPojos) {\r\n\r\n//\r\n//\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n//\t\ttry {\r\n//\r\n//\t\t\tString logPushUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/logs/post\";\r\n//\t\t\tHttpPost post = new HttpPost(logPushUrl);\r\n//\t\t\tRequestClientLogsPojo pushRequest = new RequestClientLogsPojo();\r\n//\t\t\tpushRequest.setRequestClientLogPojos(requestLogPojos);\r\n//\r\n//\t\t\tGson gson = new Gson();\r\n//\r\n//\t\t\tStringEntity input = new StringEntity(gson.toJson(pushRequest));\r\n//\t\t\tinput.setContentType(\"application/json\");\r\n//\t\t\tpost.setEntity(input);\r\n//\r\n//\t\t\t// this.logger.info(\"Sending logs to server\");\r\n//\r\n//\t\t\tCloseableHttpResponse response = client.execute(post);\r\n//\r\n//\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n//\r\n////\t\t\t  ServerResponseLogPojo serverResponse = (ServerResponseLogPojo) gson.fromJson(responseString, ServerResponseLogPojo.class);\r\n//\t\t\tString status = \"OK\";\r\n//\t\t\treturn status;\r\n//\r\n//\t\t} catch (Exception e) {\r\n//\t\t\te.printStackTrace();\r\n//\t\t\treturn null;\r\n//\t\t}\r\n//\r\n//\t\tfinally {\r\n//\t\t\ttry {\r\n//\t\t\t\tclient.close();\r\n//\t\t\t} catch (IOException e) {\r\n//\t\t\t\te.printStackTrace();\r\n//\t\t\t}\r\n//\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\tpublic ResponseStressTestingConfig getStressTestingConfig(String iccid, String woId, String userName) {\r\n\r\n\t\tCloseableHttpClient client = HttpClients.createDefault();\r\n\t\tResponseStressTestingConfig responseStressTestingConfig = new ResponseStressTestingConfig();\r\n\r\n\t\ttry {\r\n\t\t\tString completeUrl = \"http://localhost:8080/trakmeserver/api/external/fieldtest/profileconfig/get?usrId=\"\r\n\t\t\t\t\t+ userName + \"&woId=\" + woId;\r\n\r\n\t\t\t// this.logger.debug(\"Calling  Server : \" + completeUrl);\r\n\r\n\t\t\tHttpGet get = new HttpGet(completeUrl);\r\n\r\n\t\t\tGson gson = new Gson();\r\n\t\t\tCloseableHttpResponse response = client.execute(get);\r\n\t\t\t// String responseString =\r\n\t\t\t// \"{\\\"apduList\\\":[\\\"RESET\\\",\\\"A0A40000023F00\\\",\\\"A0A40000027F20\\\",\\\"A0A40000026F7E\\\"],\\\"loopCount\\\":10000,\\\"startCounter\\\":1}\";\r\n\t\t\t// this.System.out.println(\"Sever Response : \" + responseString);\r\n\t\t\tString responseString = EntityUtils.toString(response.getEntity());\r\n\t\t\tResponseFieldTestingProfileConfigPojo responseFieldTestingProfileConfigPojo = (ResponseFieldTestingProfileConfigPojo) gson\r\n\t\t\t\t\t.fromJson(responseString, ResponseFieldTestingProfileConfigPojo.class);\r\n\t\t\tresponseStressTestingConfig.setApduList(responseFieldTestingProfileConfigPojo.getStressTestingApdus());\r\n\t\t\tresponseStressTestingConfig.setLoopCount(responseFieldTestingProfileConfigPojo.getStressTestingLoopCount());\r\n\t\t\tresponseStressTestingConfig.setStartCounter(1);\r\n\t\t\t\r\n\t\t\treturn responseStressTestingConfig;\r\n\r\n\t\t} catch (Exception e) {\r\n\r\n\t\t\te.printStackTrace();\r\n\r\n\t\t\treturn null;\r\n\r\n\t\t}\r\n\r\n\t\tfinally {\r\n\r\n\t\t\ttry {\r\n\r\n\t\t\t\tclient.close();\r\n\r\n\t\t\t} catch (IOException e) {\r\n\r\n\t\t\t\te.printStackTrace();\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t}\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java b/src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java
--- a/src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java	(revision 298661d93eb1d12727ce62c0bfc9d0237af41340)
+++ b/src/main/java/com/mannash/simcardvalidation/service/TrakmeServerCommunicationServiceImpl.java	(date 1679468518096)
@@ -1,6 +1,7 @@
 package com.mannash.simcardvalidation.service;
 
 import com.google.gson.Gson;
+import com.mannash.simcardvalidation.SimVerifyLoggerThread;
 import com.mannash.simcardvalidation.pojo.*;
 import org.apache.http.HttpEntity;
 import org.apache.http.HttpResponse;
@@ -37,7 +38,9 @@
 	private final Logger logger = LoggerFactory.getLogger(TrakmeServerCommunicationServiceImpl.class);
 	public String hostIP = "";
 
-	public TrakmeServerCommunicationServiceImpl() {
+	SimVerifyLoggerThread simVerifyLoggerThread;
+	public TrakmeServerCommunicationServiceImpl(SimVerifyLoggerThread simVerifyLoggerThread) {
+		this.simVerifyLoggerThread = simVerifyLoggerThread;
 
 //		 this.loggerService = new LoggerServiceImpl();
 
Index: src/main/java/com/mannash/simcardvalidation/TestingController4.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.mannash.simcardvalidation;\r\n\r\nimport com.mannash.simcardvalidation.card.FileSystemVerification;\r\nimport com.mannash.simcardvalidation.card.ProfileTest3G;\r\nimport com.mannash.simcardvalidation.card.StressTest;\r\nimport com.mannash.simcardvalidation.pojo.ExportTestingResultPojo;\r\nimport com.mannash.simcardvalidation.pojo.TerminalInfo;\r\nimport com.mannash.simcardvalidation.service.LoggerService;\r\nimport com.mannash.simcardvalidation.service.TerminalConnectService;\r\nimport com.mannash.simcardvalidation.service.TerminalConnectServiceImpl;\r\nimport javafx.application.Platform;\r\nimport javafx.concurrent.Task;\r\nimport javafx.fxml.FXML;\r\nimport javafx.fxml.FXMLLoader;\r\nimport javafx.fxml.Initializable;\r\nimport javafx.scene.Parent;\r\nimport javafx.scene.Scene;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.image.ImageView;\r\nimport javafx.stage.Stage;\r\n\r\nimport javax.smartcardio.*;\r\nimport java.io.IOException;\r\nimport java.lang.reflect.Field;\r\nimport java.lang.reflect.Method;\r\nimport java.net.URL;\r\nimport java.sql.Date;\r\nimport java.time.LocalDate;\r\nimport java.time.LocalTime;\r\nimport java.util.*;\r\nimport java.util.concurrent.ConcurrentHashMap;\r\n\r\nimport java.util.concurrent.atomic.AtomicBoolean;\r\n\r\n\r\npublic class TestingController4 implements Initializable, Runnable {\r\n\r\n    int widgetId;\r\n    String AID;\r\n    String threadName;\r\n\r\n    ExportTestingResultPojo testingResultPojo = new ExportTestingResultPojo();\r\n\r\n    SimVerifyMasterThread2 simVerifyMasterThread2;\r\n\r\n    SimVerifyLoggerThread loggerThread;\r\n    private volatile boolean stopRequested = true;\r\n\r\n    public TestingController4(String threadName, TerminalInfo terminal1, SimVerifyMasterThread2 thread, int index, SimVerifyLoggerThread loggerThread) {\r\n        simVerifyMasterThread2 = thread;\r\n        this.threadName = threadName;\r\n        this.terminal = terminal1;\r\n        this.widgetId = index;\r\n        this.loggerThread = loggerThread;\r\n    }\r\n\r\n    @FXML\r\n    private ImageView img_test_button;\r\n    private ToggleGroup toggleGroup;\r\n\r\n    Boolean isTesting = true;\r\n    private Task<Void> mainTaskThread;\r\n    private Task<Boolean> task1;\r\n    private Task<Boolean> task2;\r\n    private Task<Boolean> task3;\r\n    private Task<Boolean> task4;\r\n    private Task<Boolean> task5;\r\n\r\n    //Threads\r\n\r\n\r\n    public Card getCard() {\r\n        return card;\r\n    }\r\n\r\n    public void setCard(Card card) {\r\n        System.out.println(\"[\" + widgetId + \"] \" + \"inside the setCard\");\r\n        this.card = card;\r\n    }\r\n\r\n    public String getLocalIccid() {\r\n        return localIccid;\r\n    }\r\n\r\n    public void setLocalIccid(String localIccid) {\r\n        this.localIccid = localIccid;\r\n    }\r\n\r\n    public int getTerminalId() {\r\n        return terminalId;\r\n    }\r\n\r\n    public void setTerminalId(int terminalId) {\r\n        this.terminalId = terminalId;\r\n    }\r\n\r\n    public TerminalInfo getTerminal() {\r\n        return terminal;\r\n    }\r\n\r\n    public void setTerminal(TerminalInfo _terminal) {\r\n        terminal = _terminal;\r\n    }\r\n\r\n    public boolean isAtr() {\r\n        return isAtr;\r\n    }\r\n\r\n    public void setAtr(boolean atr) {\r\n        isAtr = atr;\r\n    }\r\n\r\n    public boolean isFileSystemVerification() {\r\n        return fileSystemVerification;\r\n    }\r\n\r\n    public void setFileSystemVerification(boolean _fileSystemVerification) {\r\n        fileSystemVerification = _fileSystemVerification;\r\n    }\r\n\r\n    public boolean isProfileTesting() {\r\n        return profileTesting;\r\n    }\r\n\r\n    public void setProfileTesting(boolean profileTesting) {\r\n        this.profileTesting = profileTesting;\r\n    }\r\n\r\n    public boolean isReadWriteTesting() {\r\n        return readWriteTesting;\r\n    }\r\n\r\n    public void setReadWriteTesting(boolean readWriteTesting) {\r\n        this.readWriteTesting = readWriteTesting;\r\n    }\r\n\r\n    public boolean isCardConnected() {\r\n        return cardConnected;\r\n    }\r\n\r\n    public void setCardConnected(boolean cardConnected) {\r\n        System.out.println(\"[\" + widgetId + \"] \" + \"From setCardConnected\");\r\n        this.cardConnected = cardConnected;\r\n    }\r\n\r\n    public boolean isResultCompilation() {\r\n        return resultCompilation;\r\n    }\r\n\r\n    public void setResultCompilation(boolean resultCompilation) {\r\n        this.resultCompilation = resultCompilation;\r\n    }\r\n\r\n    public boolean isTestingRunning() {\r\n        return testingRunning;\r\n    }\r\n\r\n    public void setTestingRunning(boolean testingRunning) {\r\n        this.testingRunning = testingRunning;\r\n    }\r\n\r\n    public String getImsi() {\r\n        return imsi;\r\n    }\r\n\r\n    public void setImsi(String imsi) {\r\n        this.imsi = imsi;\r\n    }\r\n\r\n    private Card card;\r\n    private String localIccid;\r\n    private int terminalId;\r\n    private TerminalInfo terminal;\r\n    private boolean isAtr = false;\r\n    private boolean fileSystemVerification = false;\r\n    private boolean profileTesting = false;\r\n    private boolean readWriteTesting = false;\r\n    private boolean cardConnected = false;\r\n    private boolean resultCompilation = false;\r\n    private boolean testingRunning = false;\r\n    private LoggerService loggerService;\r\n    private String imsi;\r\n    public String _terminal = \"T\";\r\n    public String _card = \"C\";\r\n    public String _device = \"D\";\r\n    public String _ui = \"UI\";\r\n    CardChannel cardChannel;\r\n\r\n    List<Thread> threadList = new ArrayList<>();\r\n    private AtomicBoolean running = new AtomicBoolean(true);\r\n\r\n\r\n    //Tasks threads\r\n    Thread thread1;\r\n    Thread thread2;\r\n    Thread thread3;\r\n    Thread thread4;\r\n    Thread thread5;\r\n\r\n\r\n    Map<String, Thread> threadMap = new HashMap<>();\r\n\r\n    public AtomicBoolean stopped = new AtomicBoolean(false);\r\n\r\n    String terminalICCID = null;\r\n    String terminalIMSI  = null;\r\n\r\n    int terminalNumber = 0;\r\n\r\n\r\n    @Override\r\n    public void initialize(URL url, ResourceBundle resourceBundle) {\r\n\r\n        this.toggleGroup = new ToggleGroup();\r\n    }\r\n\r\n    public void interrupt() {\r\n        running.set(false);\r\n    }\r\n\r\n    boolean isRunning() {\r\n        return running.get();\r\n    }\r\n\r\n\r\n    //    public Runnable start(){\r\n//        mainThread = new Thread(this);\r\n//        mainThread.start();\r\n//        return null;\r\n//    }\r\n    public void stopThread(Boolean flag) {\r\n        if (!stopRequested) {\r\n            stopRequested = flag;\r\n            Thread.currentThread().interrupt();\r\n        }\r\n    }\r\n\r\n    public void stopMainThread() {\r\n        for (Map.Entry<String, Thread> entry : this.threadMap.entrySet()) {\r\n            String key = entry.getKey();\r\n            Thread thread = entry.getValue();\r\n            if (thread.isAlive()) {\r\n                Boolean threadStatus = thread.isAlive();\r\n                System.out.println(\"Before stopping  : \" + thread + \" : \" + threadStatus);\r\n                thread.stop();\r\n                threadStatus = thread.isAlive();\r\n                System.out.println(\"After stopping  : \" + thread + \" : \" + threadStatus);\r\n            }\r\n//            if(thread.isDaemon())\r\n            System.out.println(Thread.currentThread().isAlive());\r\n        }\r\n    }\r\n\r\n    public void run() {\r\n\r\n        TerminalInfo localTerminal = terminal;\r\n        task1 = new Task<Boolean>() {\r\n            @Override\r\n            protected Boolean call() throws Exception {\r\n                //connect to terminal\r\n                System.out.println(\"[\" + widgetId + \"] \" + \"Inside the task 1\");\r\n//                    boolean b1 = initializeTerminal();\r\n                CardTerminal cardTerminal = localTerminal.getCt();\r\n                if (cardTerminal.isCardPresent()) {\r\n                    loggerThread.displayLogs(_terminal, \"Device connected\", widgetId);\r\n                    try {\r\n                        Card card = cardTerminal.connect(\"T=0\");\r\n                        setCard(card);\r\n                        cardChannel = card.getBasicChannel();\r\n                    } catch (CardException e) {\r\n                        e.printStackTrace();\r\n                        setCardConnected(false);\r\n                        System.out.println(\"Terminal: \" + cardTerminal.getName() + \" Card Not Present\");\r\n                        loggerThread.displayLogs(_terminal, \"Card is not present\", widgetId);\r\n\r\n                        Thread.currentThread().interrupt();\r\n                        return false;\r\n                    }\r\n                    System.out.println(\"Card is present on : \" + cardTerminal.getName());\r\n                    loggerThread.displayLogs(_terminal, \"Card connected\", widgetId);\r\n\r\n                    try {\r\n                        AID = getAID(cardTerminal);\r\n                    } catch (Exception e) {\r\n                        // this.logger.error(\"Exception in getAID\");\r\n                    }\r\n                    loggerThread.displayLogs(_terminal, _card, \"Reading ICCID\", widgetId);\r\n                    String iccid = getICCID(cardTerminal);\r\n                    terminalICCID = iccid;\r\n                    terminalNumber = widgetId +1;\r\n                    loggerThread.displayLogs(_terminal, \"ICCID Value \" + iccid, widgetId);\r\n                    loggerThread.displayLogs(_terminal, _card, \"Reading IMSI\", widgetId);\r\n                    String imsi = getIMSI(cardTerminal);\r\n                    terminalIMSI = imsi;\r\n                    loggerThread.displayLogs(_terminal, \"IMSI Value \" + imsi, widgetId);\r\n\r\n                    if (iccid != null && !\"\".equalsIgnoreCase(iccid)) {\r\n                        localTerminal.setTerminalCardIccid(iccid);\r\n                        localTerminal.setImsi(imsi);\r\n                        // terminalInfo.setTerminalNumber(Integer.parseInt(cardTerminal.getName()));\r\n                    } else {\r\n\r\n                        System.out.println(\"Terminal: \" + cardTerminal.getName() + \" Failed to fetch Card information\");\r\n                        loggerThread.displayLogs(_terminal, \"Card is not responding\", widgetId);\r\n                        return false;\r\n                    }\r\n                    setCardConnected(true);\r\n                } else {\r\n                    setCardConnected(false);\r\n                    System.out.println(\"Terminal: \" + cardTerminal.getName() + \" Card Not Present\");\r\n                    loggerThread.displayLogs(_terminal, \"Card is not present\", widgetId);\r\n                    return false;\r\n                }\r\n                return true;\r\n\r\n            }\r\n        };\r\n        this.thread1 = new Thread(task1);\r\n        this.threadMap.put(\"t1\", this.thread1);\r\n        thread1.start();\r\n\r\n        task2 = new Task<Boolean>() {\r\n\r\n            @Override\r\n            protected Boolean call() {\r\n                loggerThread.displayLogs(_terminal, _card, \"Starting File System Verification\", widgetId);\r\n                System.out.println(\"Inside the task 2\");\r\n                boolean b2 = fileSystemVerification();\r\n                setFileSystemVerification(b2);\r\n                System.out.println(\"AFTER FILE VERIFICATION!!\");\r\n                return b2;\r\n            }\r\n\r\n\r\n        };\r\n\r\n        task3 = new Task<Boolean>() {\r\n            @Override\r\n            protected Boolean call() {\r\n                //connect to terminal\r\n                System.out.println(\"Inside the task 3\");\r\n                loggerThread.displayLogs(_terminal, _card, \"Starting Profile Verification\", widgetId);\r\n                boolean b3 = profileValidation();\r\n                // System.out.println(\"profile test status : \"+b3);\r\n                setProfileTesting(b3);\r\n\r\n                System.out.println(\"AFTER PROFILE VERIFICATION!!\");\r\n                return b3;\r\n\r\n            }\r\n        };\r\n\r\n        task4 = new Task<Boolean>() {\r\n            @Override\r\n            protected Boolean call() throws InterruptedException {\r\n                //connect to terminal\r\n                System.out.println(\"Inside the task 4\");\r\n                System.out.println(\"widgetId : \" + widgetId);\r\n                loggerThread.displayLogs(_terminal, _card, \"Starting Read/Write Test\", widgetId);\r\n                boolean b4 = readWriteTest();\r\n\r\n                setReadWriteTesting(b4);\r\n\r\n                System.out.println(\"AFTER STRESS TESTING\");\r\n                return b4;\r\n            }\r\n        };\r\n\r\n        task5 = new Task<Boolean>() {\r\n            @Override\r\n            protected Boolean call() {\r\n                //connect to terminal\r\n                System.out.println(\"Inside the task 5\");\r\n                boolean b5 = resultCompilation();\r\n                setResultCompilation(b5);\r\n                return b5;\r\n            }\r\n        };\r\n\r\n        Platform.runLater(() -> {\r\n            task1.setOnSucceeded(event1 -> {\r\n                Boolean result = task1.getValue();\r\n                System.out.println(\"result of task 1 : \" + result);\r\n                Platform.runLater(() -> {\r\n                    if (result) {\r\n\r\n                    } else {\r\n\r\n                        simVerifyMasterThread2.updateWidgetStatusImage(false, widgetId);\r\n                        simVerifyMasterThread2.updateWidgetStatusLabel(\"Failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"SIM Heartbeat failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Skipping File System Verification\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Skipping Profile Verification\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Skipping Read/Write Test\", widgetId);\r\n                    }\r\n\r\n                });\r\n                if (result) {\r\n                    this.testingResultPojo.setTerminalNumber(terminalNumber);\r\n                    this.testingResultPojo.setTerminalICCID(terminalICCID);\r\n                    this.testingResultPojo.setTerminalIMSI(terminalIMSI);\r\n                    this.testingResultPojo.setDateOfTesting(LocalDate.now());\r\n                    this.testingResultPojo.setTimeOfTesting(LocalTime.now());\r\n                    this.testingResultPojo.setSIMHeartbeat(\"OK\");\r\n                    this.thread2 = new Thread(task2);\r\n                    this.threadMap.put(\"t2\", this.thread2);\r\n                    this.thread2.start();\r\n                    this.thread1.stop();\r\n                } else {\r\n                    System.out.println(\"Inside else of task1\");\r\n                    this.testingResultPojo.setFileSystemVerification(\"NOT OK\");\r\n                    this.testingResultPojo.setProfileTesting(\"NOT OK\");\r\n                    this.testingResultPojo.setReadWrite(\"NOT OK\");\r\n                    this.testingResultPojo.setCardStatus(\"FAULTY!\");\r\n                    System.out.println(\"TASK-I else, SIMHeartBeat : \" + this.testingResultPojo.getSIMHeartbeat());\r\n                    task2.cancel();\r\n                    task3.cancel();\r\n                    task4.cancel();\r\n                    task5.cancel();\r\n                    simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);\r\n                    simVerifyMasterThread2.updateTesting(widgetId);\r\n\r\n                    return;\r\n                }\r\n            });\r\n            task2.setOnSucceeded(event2 -> {\r\n                Boolean result = task2.getValue();\r\n                Platform.runLater(() -> {\r\n                if (result) {\r\n                    loggerThread.displayLogs(_terminal, _card, \"File Verification done\", widgetId);\r\n                } else {\r\n\r\n                        simVerifyMasterThread2.updateWidgetStatusImage(false, widgetId);\r\n                        simVerifyMasterThread2.updateWidgetStatusLabel(\"Failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"File Verification failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Skipping Profile Verification\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Skipping Read/Write Test\", widgetId);\r\n\r\n                }\r\n                });\r\n\r\n                if (result) {\r\n                    this.testingResultPojo.setFileSystemVerification(\"OK\");\r\n                    System.out.println(\"Inside the if of task2!!\");\r\n                    this.thread3 = new Thread(task3);\r\n                    this.threadMap.put(\"t3\", this.thread3);\r\n                    this.thread3.start();\r\n                    this.thread2.stop();\r\n\r\n                } else {\r\n                    System.out.println(\"Inside the else of task2!!!\");\r\n                    this.testingResultPojo.setFileSystemVerification(\"NOT OK\");\r\n                    this.testingResultPojo.setProfileTesting(\"NOT OK\");\r\n                    this.testingResultPojo.setReadWrite(\"NOT OK\");\r\n                    this.testingResultPojo.setCardStatus(\"FAULTY\");\r\n                    System.out.println(\"TASK-II else File verification : \" + this.testingResultPojo.getFileSystemVerification());\r\n                    System.out.println(\"TASK-II else profile testing : \" + this.testingResultPojo.getProfileTesting());\r\n                    System.out.println(\"TASK-II else read/write : \" + this.testingResultPojo.getReadWrite());\r\n                    System.out.println(\"TASK-II else card status : \" + this.testingResultPojo.getCardStatus());\r\n\r\n                    task3.cancel();\r\n                    task4.cancel();\r\n                    task5.cancel();\r\n                    simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);\r\n                    simVerifyMasterThread2.updateTesting(widgetId);\r\n                    return;\r\n                }\r\n\r\n\r\n\r\n\r\n\r\n            });\r\n\r\n            task3.setOnSucceeded(event3 -> {\r\n                Boolean result = task3.getValue();\r\n\r\n                if (result) {\r\n                    loggerThread.displayLogs(_terminal, \"Profile Verification done\", widgetId);\r\n                } else {\r\n                    Platform.runLater(() -> {\r\n                        simVerifyMasterThread2.updateWidgetStatusImage(false, widgetId);\r\n                        simVerifyMasterThread2.updateWidgetStatusLabel(\"Failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Profile Verification failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Skipping Read/Write Test\", widgetId);\r\n                    });\r\n                }\r\n\r\n                if (result) {\r\n                    this.testingResultPojo.setProfileTesting(\"OK\");\r\n                    System.out.println(\"Inside the if of task3!!\");\r\n                    this.thread4 = new Thread(task4);\r\n                    this.threadMap.put(\"t3\", this.thread4);\r\n                    this.thread4.start();\r\n                    this.thread3.stop();\r\n                } else {\r\n                    this.testingResultPojo.setProfileTesting(\"NOT OK\");\r\n                    this.testingResultPojo.setReadWrite(\"NOT OK\");\r\n                    this.testingResultPojo.setCardStatus(\"FAULTY\");\r\n                    System.out.println(\"Inside the else of task3!!\");\r\n                    System.out.println(\"TASK-III else profile testing : \" + this.testingResultPojo.getProfileTesting());\r\n                    System.out.println(\"TASK-III else read/write : \" + this.testingResultPojo.getReadWrite());\r\n                    System.out.println(\"TASK-III else card status : \" + this.testingResultPojo.getCardStatus());\r\n                    task4.cancel();\r\n                    task5.cancel();\r\n\r\n                    simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);\r\n                    simVerifyMasterThread2.updateTesting(widgetId);\r\n                    return;\r\n                }\r\n            });\r\n\r\n            task4.setOnSucceeded(event4 -> {\r\n                Boolean result = task4.getValue();\r\n                Platform.runLater(() -> {\r\n                    if (result) {\r\n                        loggerThread.displayLogs(_terminal, \"Read/Write Test Passed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Card is OK.\", widgetId);\r\n                    } else {\r\n                        simVerifyMasterThread2.updateWidgetStatusImage(false, widgetId);\r\n                        simVerifyMasterThread2.updateWidgetStatusLabel(\"Failed\", widgetId);\r\n                        loggerThread.displayLogs(_terminal, \"Read/Write Test failed\", widgetId);\r\n                    }\r\n                });\r\n\r\n\r\n                if (result) {\r\n                    System.out.println(\"Inside the if of task4!!\");\r\n                    this.testingResultPojo.setReadWrite(\"OK\");\r\n                    this.thread5 = new Thread(task5);\r\n                    this.threadMap.put(\"t5\", this.thread5);\r\n                    this.thread5.start();\r\n                    this.thread4.stop();\r\n                } else {\r\n                    this.testingResultPojo.setReadWrite(\"NOT OK\");\r\n                    this.testingResultPojo.setCardStatus(\"FAULTY\");\r\n                    System.out.println(\"TASK-IV else read/write : \" + this.testingResultPojo.getReadWrite());\r\n                    System.out.println(\"TASK-IV else card status : \" + this.testingResultPojo.getCardStatus());\r\n\r\n                    task5.cancel();\r\n                    simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);\r\n                    simVerifyMasterThread2.updateTesting(widgetId);\r\n                    return;\r\n                }\r\n            });\r\n\r\n            task5.setOnSucceeded(event5 -> {\r\n                Boolean result = task5.getValue();\r\n                Platform.runLater(() -> {\r\n                    if (result) {\r\n\r\n                        // simVerifyMasterThread2.setDoneButton();\r\n                        simVerifyMasterThread2.updateWidgetStatusImage(true, widgetId);\r\n                        simVerifyMasterThread2.updateWidgetStatusLabel(\"Ok\", widgetId);\r\n                    } else {\r\n                        simVerifyMasterThread2.updateWidgetStatusImage(false, widgetId);\r\n                        simVerifyMasterThread2.updateWidgetStatusLabel(\"Failed\", widgetId);\r\n                    }\r\n\r\n                    if(result){\r\n                        System.out.println(\"Inside the if of task5!!\");\r\n                        this.testingResultPojo.setCardStatus(\"OK\");\r\n                    }\r\n                    else{\r\n                        System.out.println(\"Inside the else of task5!!\");\r\n                        this.testingResultPojo.setCardStatus(\"NOT OK\");\r\n                        System.out.println(\"TASK-V else card status : \" + this.testingResultPojo.getCardStatus());\r\n                        simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);\r\n\r\n                    }\r\n                });\r\n                simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);\r\n                System.out.println(\"Testing completed\");\r\n                simVerifyMasterThread2.updateTesting(widgetId);\r\n            });\r\n\r\n        });\r\n\r\n\r\n    }\r\n\r\n\r\n    public String getIMSI(CardTerminal cardTerminal) {\r\n        try {\r\n            sendRawApduNoPrint(cardTerminal, \"00A4040C10 \" + this.AID);\r\n            sendRawApduNoPrint(cardTerminal, \"00A4090C02 6F07\");\r\n            String s1 = nibbleSwap(sendRawApduNoPrint(cardTerminal, \"00B0000009\"));\r\n            s1 = s1.substring(3);\r\n            return s1;\r\n        } catch (Exception e) {\r\n            return \"0000000000000000\";\r\n        }\r\n    }\r\n\r\n    public String byteArrayToString(byte[] paramArrayOfbyte) {\r\n        StringBuffer stringBuffer = new StringBuffer();\r\n        for (byte b = 0; b < paramArrayOfbyte.length; b++) {\r\n            String str = Integer.toHexString(paramArrayOfbyte[b] & 0xFF);\r\n            if (str.length() == 1) stringBuffer.append(0);\r\n            stringBuffer.append(str);\r\n        }\r\n        return stringBuffer.toString().toUpperCase();\r\n    }\r\n\r\n    public static String nibbleSwap(String paramString) {\r\n        String str = \"\";\r\n        for (int i = 0; i < paramString.length(); i += 2) {\r\n            String str1 = paramString.substring(i, i + 2).substring(0, 1);\r\n            String str2 = paramString.substring(i, i + 2).substring(1);\r\n            String str3 = str1;\r\n            str1 = str2;\r\n            str2 = str3;\r\n            str = str + str1 + str2;\r\n        }\r\n        return str;\r\n    }\r\n\r\n\r\n    public String insertSpace(String paramString) {\r\n        String str = \"\";\r\n        for (int i = 0; i < paramString.length(); i += 2) {\r\n            if (!str.equals(\"\")) {\r\n                str = str + \" \" + paramString.substring(i, i + 2);\r\n            } else {\r\n                str = paramString.substring(i, i + 2);\r\n            }\r\n        }\r\n        return str.toUpperCase();\r\n    }\r\n\r\n    public String sendRawApduNoPrint(CardTerminal cardTerminal, String paramString) {\r\n        try {\r\n            return sendCmd(cardTerminal, paramString);\r\n        } catch (Exception exception) {\r\n            // this.logger.error(\"Send APDU Error : \" +paramString);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public String sendCmd(CardTerminal cardTerminal, String paramString) {\r\n        paramString = paramString.toUpperCase();\r\n        paramString = paramString.replaceAll(\" \", \"\");\r\n        if (paramString.length() % 2 != 0) {\r\n\r\n        } else {\r\n            byte[] arrayOfByte = new byte[paramString.length() / 2];\r\n            boolean bool = true;\r\n            for (int i = 0; i < paramString.length(); i += 2) {\r\n                String str = paramString.substring(i, i + 2);\r\n                try {\r\n                    int j = Integer.parseInt(str, 16);\r\n                    arrayOfByte[i / 2] = (byte) j;\r\n                } catch (Exception exception) {\r\n\r\n                    bool = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (bool) {\r\n                CommandAPDU commandAPDU = null;\r\n                try {\r\n                    commandAPDU = new CommandAPDU(arrayOfByte);\r\n                } catch (Exception exception) {\r\n                    // this.logger.error(\"Command: \" + paramString + \"ERROR: \" +\r\n                    // exception.getMessage());\r\n                }\r\n                try {\r\n                    ResponseAPDU responseAPDU = cardChannel.transmit(commandAPDU);\r\n                    String fetchedIccid = byteArrayToString(responseAPDU.getData());\r\n                    return fetchedIccid;\r\n                } catch (Exception exception) {\r\n                    exception.printStackTrace();\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public String getICCID(CardTerminal cardTerminal) {\r\n        try {\r\n            sendRawApduNoPrint(cardTerminal, \"00A4080402 2FE2\");\r\n            String response = sendRawApduNoPrint(cardTerminal, \"00B000000A\");\r\n            if (response != null) {\r\n                return nibbleSwap(response);\r\n            } else {\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n        return null;\r\n    }\r\n\r\n    public String getAID(CardTerminal cardTerminal) {\r\n        String str1 = \"\", str2 = \"\";\r\n        try {\r\n            str1 = insertSpace(sendRawApduNoPrint(cardTerminal, \"00A4080402 2F00\"));\r\n            str2 = fetchRecordSize(str1);\r\n            str1 = sendRawApduNoPrint(cardTerminal, \"00B20104\" + str2);\r\n            if (!str1.equals(null)) str1 = str1.substring(8, 40);\r\n        } catch (Exception e) {\r\n            // this.logger.error(\"Null Pointer Exception : \" + str1);\r\n        }\r\n        return str1.toUpperCase();\r\n    }\r\n\r\n    public String fetchRecordSize(String paramString) {\r\n        StringTokenizer stringTokenizer = new StringTokenizer(paramString, \" \");\r\n        int i = stringTokenizer.countTokens();\r\n        byte b1 = 0, b2 = 0;\r\n        int j = 0;\r\n        String str = \"\";\r\n        String[] arrayOfString = new String[i];\r\n        try {\r\n            if (stringTokenizer.hasMoreTokens()) for (byte b = 0; b < i; b++) {\r\n                arrayOfString[b] = stringTokenizer.nextToken();\r\n                if (arrayOfString[b].equals(\"82\") && b <= i - 4) b1 = b;\r\n                if (arrayOfString[b].equals(\"80\") && b <= i - 4) b2 = b;\r\n            }\r\n            j = Integer.parseInt(arrayOfString[b1 + 4] + arrayOfString[b1 + 5], 16);\r\n            str = Integer.toHexString(j);\r\n            if (str.length() == 1) {\r\n                str = \"0\" + str;\r\n            }\r\n        } catch (Exception e) {\r\n            // e.printStackTrace();\r\n            // this.logger.error(\"ArrayIndexOutOfBoundException at\" + j);\r\n        }\r\n        return str;\r\n    }\r\n\r\n    public void logOut() throws IOException {\r\n        Parent logInPage = FXMLLoader.load(getClass().getResource(\"/com/mannash/javafxapplication/fxml/login-form.fxml\"));\r\n        Stage primaryStage = (Stage) img_test_button.getScene().getWindow();\r\n        Scene scene = new Scene(logInPage);\r\n        primaryStage.setScene(scene);\r\n        primaryStage.show();\r\n    }\r\n//    private boolean initializeTerminal() throws CardException {\r\n//        loggerThread.displayLogs(_terminal, _card, \"Calling fetchterminal\", widgetId);\r\n//        TerminalConnectService terminalConnectService = new TerminalConnectServiceImpl(null);\r\n//        try {\r\n//            List<TerminalInfo> terminalInfos = terminalConnectService.fetchTerminalInfo();\r\n//            if (terminalInfos.size() == 0) {\r\n////            displayLogs(_terminal,_card,\"No card found\");\r\n//                return false;\r\n//            } else {\r\n//                TerminalInfo terminal1 = terminalInfos.get(0);\r\n//                setTerminal(terminal1);\r\n//\r\n////            this.woId = \"1184\";\r\n//                int terminalId1 = terminal.getTerminalNumber();\r\n//                setTerminalId(terminalId1);\r\n//                return true;\r\n//            }\r\n//        } catch (Exception e) {\r\n//            // System.out.println(\"Testing controller exception\");\r\n//        }\r\n//        return false;\r\n//    }\r\n\r\n    private boolean fileSystemVerification() {\r\n//        loggerThread.displayLogs(_terminal,\"File System Verification started\",widgetId);\r\n        FileSystemVerification fileSystemVerification = new FileSystemVerification(\"0000000000000000\", terminal, getCard(), this.loggerService, this.loggerThread, widgetId);\r\n        return fileSystemVerification.runFileSystemVerification();\r\n    }\r\n\r\n    private boolean profileValidation() {\r\n        ProfileTest3G profileTest3G = new ProfileTest3G(\"0000000000000000\", this.terminal, getCard(), this.loggerService, this.loggerThread, widgetId);\r\n//        boolean runProfile = profileTest3G.runProfileTesting();\r\n        return profileTest3G.runProfileTesting();\r\n    }\r\n\r\n    public boolean readWriteTest() {\r\n        StressTest stressTest = new StressTest(this.terminal, getCard(), this.loggerService, this.loggerThread, widgetId);\r\n        stressTest.runStressTesting();\r\n        boolean stressTestingSuccessful = stressTest.startStressTest();\r\n        return stressTestingSuccessful;\r\n    }\r\n\r\n    public boolean resultCompilation() {\r\n        return true;\r\n    }\r\n\r\n    private void clearTerminal() {\r\n        try {\r\n            Class pcscterminal = Class.forName(\"sun.security.smartcardio.PCSCTerminals\");\r\n            Field contextId = pcscterminal.getDeclaredField(\"contextId\");\r\n            contextId.setAccessible(true);\r\n\r\n            if (contextId.getLong(pcscterminal) != 0L) {\r\n                // First get a new context value\r\n                Class pcsc = Class.forName(\"sun.security.smartcardio.PCSC\");\r\n                Method SCardEstablishContext = pcsc.getDeclaredMethod(\"SCardEstablishContext\", new Class[]{Integer.TYPE});\r\n                SCardEstablishContext.setAccessible(true);\r\n\r\n                Field SCARD_SCOPE_USER = pcsc.getDeclaredField(\"SCARD_SCOPE_USER\");\r\n                SCARD_SCOPE_USER.setAccessible(true);\r\n\r\n                long newId = ((Long) SCardEstablishContext.invoke(pcsc, new Object[]{SCARD_SCOPE_USER.getInt(pcsc)}));\r\n                contextId.setLong(pcscterminal, newId);\r\n\r\n\r\n                // Then clear the terminals in cache\r\n                TerminalFactory factory = TerminalFactory.getDefault();\r\n                CardTerminals terminals = factory.terminals();\r\n                Field fieldTerminals = pcscterminal.getDeclaredField(\"terminals\");\r\n                fieldTerminals.setAccessible(true);\r\n                Class classMap = Class.forName(\"java.util.Map\");\r\n                Method clearMap = classMap.getDeclaredMethod(\"clear\");\r\n\r\n                clearMap.invoke(fieldTerminals.get(terminals));\r\n            }\r\n        } catch (Exception e) {\r\n            e.printStackTrace();\r\n        }\r\n\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/mannash/simcardvalidation/TestingController4.java b/src/main/java/com/mannash/simcardvalidation/TestingController4.java
--- a/src/main/java/com/mannash/simcardvalidation/TestingController4.java	(revision 298661d93eb1d12727ce62c0bfc9d0237af41340)
+++ b/src/main/java/com/mannash/simcardvalidation/TestingController4.java	(date 1679464917066)
@@ -203,7 +203,7 @@
     public AtomicBoolean stopped = new AtomicBoolean(false);
 
     String terminalICCID = null;
-    String terminalIMSI  = null;
+    String terminalIMSI = null;
 
     int terminalNumber = 0;
 
@@ -241,10 +241,8 @@
             Thread thread = entry.getValue();
             if (thread.isAlive()) {
                 Boolean threadStatus = thread.isAlive();
-                System.out.println("Before stopping  : " + thread + " : " + threadStatus);
                 thread.stop();
                 threadStatus = thread.isAlive();
-                System.out.println("After stopping  : " + thread + " : " + threadStatus);
             }
 //            if(thread.isDaemon())
             System.out.println(Thread.currentThread().isAlive());
@@ -287,7 +285,7 @@
                     loggerThread.displayLogs(_terminal, _card, "Reading ICCID", widgetId);
                     String iccid = getICCID(cardTerminal);
                     terminalICCID = iccid;
-                    terminalNumber = widgetId +1;
+                    terminalNumber = widgetId + 1;
                     loggerThread.displayLogs(_terminal, "ICCID Value " + iccid, widgetId);
                     loggerThread.displayLogs(_terminal, _card, "Reading IMSI", widgetId);
                     String imsi = getIMSI(cardTerminal);
@@ -407,12 +405,10 @@
                     this.thread2.start();
                     this.thread1.stop();
                 } else {
-                    System.out.println("Inside else of task1");
                     this.testingResultPojo.setFileSystemVerification("NOT OK");
                     this.testingResultPojo.setProfileTesting("NOT OK");
                     this.testingResultPojo.setReadWrite("NOT OK");
                     this.testingResultPojo.setCardStatus("FAULTY!");
-                    System.out.println("TASK-I else, SIMHeartBeat : " + this.testingResultPojo.getSIMHeartbeat());
                     task2.cancel();
                     task3.cancel();
                     task4.cancel();
@@ -426,9 +422,9 @@
             task2.setOnSucceeded(event2 -> {
                 Boolean result = task2.getValue();
                 Platform.runLater(() -> {
-                if (result) {
-                    loggerThread.displayLogs(_terminal, _card, "File Verification done", widgetId);
-                } else {
+                    if (result) {
+                        loggerThread.displayLogs(_terminal, _card, "File Verification done", widgetId);
+                    } else {
 
                         simVerifyMasterThread2.updateWidgetStatusImage(false, widgetId);
                         simVerifyMasterThread2.updateWidgetStatusLabel("Failed", widgetId);
@@ -436,28 +432,21 @@
                         loggerThread.displayLogs(_terminal, "Skipping Profile Verification", widgetId);
                         loggerThread.displayLogs(_terminal, "Skipping Read/Write Test", widgetId);
 
-                }
+                    }
                 });
 
                 if (result) {
                     this.testingResultPojo.setFileSystemVerification("OK");
-                    System.out.println("Inside the if of task2!!");
                     this.thread3 = new Thread(task3);
                     this.threadMap.put("t3", this.thread3);
                     this.thread3.start();
                     this.thread2.stop();
 
                 } else {
-                    System.out.println("Inside the else of task2!!!");
                     this.testingResultPojo.setFileSystemVerification("NOT OK");
                     this.testingResultPojo.setProfileTesting("NOT OK");
                     this.testingResultPojo.setReadWrite("NOT OK");
                     this.testingResultPojo.setCardStatus("FAULTY");
-                    System.out.println("TASK-II else File verification : " + this.testingResultPojo.getFileSystemVerification());
-                    System.out.println("TASK-II else profile testing : " + this.testingResultPojo.getProfileTesting());
-                    System.out.println("TASK-II else read/write : " + this.testingResultPojo.getReadWrite());
-                    System.out.println("TASK-II else card status : " + this.testingResultPojo.getCardStatus());
-
                     task3.cancel();
                     task4.cancel();
                     task5.cancel();
@@ -467,9 +456,6 @@
                 }
 
 
-
-
-
             });
 
             task3.setOnSucceeded(event3 -> {
@@ -488,7 +474,6 @@
 
                 if (result) {
                     this.testingResultPojo.setProfileTesting("OK");
-                    System.out.println("Inside the if of task3!!");
                     this.thread4 = new Thread(task4);
                     this.threadMap.put("t3", this.thread4);
                     this.thread4.start();
@@ -497,13 +482,8 @@
                     this.testingResultPojo.setProfileTesting("NOT OK");
                     this.testingResultPojo.setReadWrite("NOT OK");
                     this.testingResultPojo.setCardStatus("FAULTY");
-                    System.out.println("Inside the else of task3!!");
-                    System.out.println("TASK-III else profile testing : " + this.testingResultPojo.getProfileTesting());
-                    System.out.println("TASK-III else read/write : " + this.testingResultPojo.getReadWrite());
-                    System.out.println("TASK-III else card status : " + this.testingResultPojo.getCardStatus());
                     task4.cancel();
                     task5.cancel();
-
                     simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);
                     simVerifyMasterThread2.updateTesting(widgetId);
                     return;
@@ -525,7 +505,6 @@
 
 
                 if (result) {
-                    System.out.println("Inside the if of task4!!");
                     this.testingResultPojo.setReadWrite("OK");
                     this.thread5 = new Thread(task5);
                     this.threadMap.put("t5", this.thread5);
@@ -534,9 +513,6 @@
                 } else {
                     this.testingResultPojo.setReadWrite("NOT OK");
                     this.testingResultPojo.setCardStatus("FAULTY");
-                    System.out.println("TASK-IV else read/write : " + this.testingResultPojo.getReadWrite());
-                    System.out.println("TASK-IV else card status : " + this.testingResultPojo.getCardStatus());
-
                     task5.cancel();
                     simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);
                     simVerifyMasterThread2.updateTesting(widgetId);
@@ -548,8 +524,6 @@
                 Boolean result = task5.getValue();
                 Platform.runLater(() -> {
                     if (result) {
-
-                        // simVerifyMasterThread2.setDoneButton();
                         simVerifyMasterThread2.updateWidgetStatusImage(true, widgetId);
                         simVerifyMasterThread2.updateWidgetStatusLabel("Ok", widgetId);
                     } else {
@@ -557,14 +531,10 @@
                         simVerifyMasterThread2.updateWidgetStatusLabel("Failed", widgetId);
                     }
 
-                    if(result){
-                        System.out.println("Inside the if of task5!!");
+                    if (result) {
                         this.testingResultPojo.setCardStatus("OK");
-                    }
-                    else{
-                        System.out.println("Inside the else of task5!!");
+                    } else {
                         this.testingResultPojo.setCardStatus("NOT OK");
-                        System.out.println("TASK-V else card status : " + this.testingResultPojo.getCardStatus());
                         simVerifyMasterThread2.cardTestingResultMap.put(this.widgetId, testingResultPojo);
 
                     }
